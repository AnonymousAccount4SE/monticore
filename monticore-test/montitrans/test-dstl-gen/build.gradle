/* (c) https://github.com/MontiCore/monticore */
description = 'MontiTrans Test: DSTLGen'

def grammarsDir = "$projectDir/src/main/grammars"
def _outputDir = "$buildDir/generated-sources"

task generateSocialNetwork (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/social/SocialNetwork.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/social/SocialNetwork.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generateSocialNetworkTR (type: MCTask, dependsOn: generateSocialNetwork) {
  grammar = file "$_outputDir/mc/testcases/social/tr/SocialNetworkTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/social/tr/SocialNetworkTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}
task generateStatechart (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/statechart/Statechart.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/statechart/Statechart.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generateStatechartTR (type: MCTask, dependsOn: generateStatechart) {
  grammar = file "$_outputDir/mc/testcases/statechart/tr/StatechartTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/statechart/tr/StatechartTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}

task generateAutomaton (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/automaton/Automaton.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/automaton/Automaton.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generateAutomatonTR (type: MCTask, dependsOn: generateAutomaton) {
  grammar = file "$_outputDir/mc/testcases/automaton/tr/AutomatonTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/automaton/tr/AutomatonTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}

task generatePropertiesAutomatonComponent (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/DSLWithOtherPropertiesThanAutomatonComponent.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/DSLWithOtherPropertiesThanAutomatonComponent.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generatePropertiesAutomatonComponentTR (type: MCTask, dependsOn: generatePropertiesAutomatonComponent) {
  grammar = file "$_outputDir/mc/testcases/tr/DSLWithOtherPropertiesThanAutomatonComponentTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/tr/DSLWithOtherPropertiesThanAutomatonComponentTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}

task generatePropertiesAutomaton (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/DSLWithOtherPropertiesThanAutomaton.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/DSLWithOtherPropertiesThanAutomaton.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generatePropertiesAutomatonTR (type: MCTask, dependsOn: [generatePropertiesAutomaton, generatePropertiesAutomatonComponent, generateAutomaton]) {
  grammar = file "$_outputDir/mc/testcases/tr/DSLWithOtherPropertiesThanAutomatonTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/tr/DSLWithOtherPropertiesThanAutomatonTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}

task generateGenericDSL (type: MCTask) {
  grammar = file "$grammarsDir/mc/testcases/GenericDSL.mc4"
  outputDir = file _outputDir
  def uptoDate = incCheck("mc/testcases/GenericDSL.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = true
}
task generateGenericDSLTR (type: MCTask, dependsOn: generateGenericDSL) {
  grammar = file "$_outputDir/mc/testcases/tr/GenericDSLTR.mc4"
  outputDir = file _outputDir
  modelPath += file _outputDir
  def uptoDate = incCheck("mc/testcases/tr/GenericDSLTR.mc4")
  outputs.upToDateWhen { uptoDate }
  dstlGen = false
}

compileJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}
sourceSets {
  main.java.srcDirs += [ _outputDir ]
}
