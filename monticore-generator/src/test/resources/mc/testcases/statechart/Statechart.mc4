/* (c) https://github.com/MontiCore/monticore */
package mc.testcases.statechart;

grammar Statechart {

token Name =
        ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;

  fragment token NEWLINE =
    ('\r' '\n' |
    '\r' |
    '\n' ):
  ;

  token WS =
    (' ' |
    '\t' |
     '\r' '\n' |
    '\r' |
    '\n' ) :{_channel = HIDDEN;};

  token SL_COMMENT =
    "//" (~('\n' |
      '\r' )
    )* :
    { _channel = HIDDEN;
      if (getCompiler() != null) {
        de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
        de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
        _comment.set_SourcePositionStart(startPos);
        _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
        getCompiler().addComment(_comment);
      }
    };

  token ML_COMMENT =
    "/*" ({_input.LA(2) != '/'}?'*' |
     NEWLINE |
      ~('*' |
      '\n' |
      '\r' )
    )*
    "*/" :
    { _channel = HIDDEN;
      if (getCompiler() != null) {
        de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
        de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
        _comment.set_SourcePositionStart(startPos);
        _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
        getCompiler().addComment(_comment);
      }
    };



  Statechart implements SCStructure= "statechart" Name "{"
    (States:State | Transitions:Transition )* "}";


  EntryAction= "entry" ":" Block:BlockStatement;

  ExitAction= "exit" ":" Block:BlockStatement;

  DoAction= "do" ":" Block:BlockStatement;

  InternTransition = "-intern>"
    ( ":"
      (Event:Name (
        "(" (Arguments:Argument ( "," Arguments:Argument)*) ")" )?
      )?
      ("[" PreCondition: Expression "]")?
      ("/" Action: BlockStatement ("[" PostCondition: Expression "]")?)? ";"
    | ";");

  State implements SCStructure =
    "state" Name ("<<" (Initial:["initial"] | Final:["final"]) ">>")*
    ( ("{" ("[" Invariant:Expression ( "&&" Invariant:Expression)* "]")?
      (EntryAction:EntryAction)?
      (DoAction)?
      (ExitAction:ExitAction)?
      (States:State
        | Transitions:Transition
        | InternTransitions:InternTransition
      )* "}") | ";")
  ;

  Transition = From:Name "->" To:Name
    (":" (Event:Name (
      "(" ((Arguments:Argument ( "," Arguments:Argument)*)?) ")" )? )?
    ("[" PreCondition: Expression "]")?
    ("/" Action: BlockStatement ("[" PostCondition: Expression "]")?)? ";"
  | ";");

  Argument= ParamType:Name ParamName:Name;

  interface SCStructure;

  astrule SCStructure =
  	Name
  	States:State*
  	Transitions:Transition*
    method public String toString() {{return name;}}
  ;

  interface Statement;

  BlockStatement implements Statement =
    "{" (Statements:Statement)* "}"
  ;

  interface Expression;

  ExpressionStatement implements Statement =
    Expression:Expression ";"
  ;

  EqualityExpression implements Expression =
        LeftOperand:Name
          Operator:["!=" | "=="] RightOperand:Name
    ;

  MethodInvocationWithQualifiedName implements Expression =
      Name ( "." Name)*
      "("
        (Arguments: Expression ("," Arguments: Expression)*)?
      ")"
  ;

  FieldAccess implements Expression =
    Name
  ;

}
