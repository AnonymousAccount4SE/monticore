/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package mc.grammars.concepts.attributes;

component grammar TestAttributes extends mc.grammars.lexicals.TestLexicals {

	/**
	 * This concepts consists of AttributeDefinitions and AttributeConcretion
	 *
	 * @attribute AttributeDefinition
	 *                list of all definitions of attributes
	 * @attribute AttributeConcretion
	 *                list of all concretions of attributes
	 */
	ConceptAttributes =
		"{" (AttributeDefinition:AttributeDefinition | AttributeConcretion:AttributeConcretion)* "}";
	
	ast ConceptAttributes =
		method public String toString() {
			return " attributes";
		};
     
	/**
	 * A concretion can only be used in a dsltool. It assigns attributes of
	 * sublanguages and their calculationrule to a new attribute. The assigned
	 * can be accessed by the name of the new attribute.
	 *
	 * @attribute Name
	 *                   name of the new attribute
	 * @attribute Calculation
	 *                   list of all assigned attributes and their calculations
	 */
	AttributeConcretion = 
		Name "{" (Calculation:Calculation)+ "}";

	/**
	 * A calculation consists of the grammar where the attribute is defined and
	 * the name of the attribute separated by a dot. The calculationclass must
	 * also be declared. The calculationclass is a reference to a java class.
	 *
	 * @attribute Name
	 *                name of the grammar and of the attribute separated by a dot
	 * @attribute CalculationClass
	 *                java class where the calculation rule is implemented 
	 */
	Calculation =
		((Name:Name | Name:"grammar" | Name:"ast") ("." (Name:Name | Name:"grammar" | Name:"ast"))*) ("=" CalculationClass:ExternalAttributeType)?;
	
	ast Calculation =
		method public String getGrammarname() {
			String name = new String();
			if (getName().size() > 1) {
				for (int i = 0; i < getName().size() - 1; i++) {
					name = name + getName().get(i);
					if (i < getName().size() - 2) {
						name = name + ".";
					}
				}
			}
			return name;
		}
		method public String getPackagename() {
			String name = new String();
			if (getName().size() > 2) {
				for (int i = 0; i < getName().size() - 2; i++) {
					name = name + getName().get(i);
					if (i < getName().size() - 3) {
						name = name + ".";
					}
				}
			}
			return name;
		}
		method public String getAttributename() {
			String name = new String();
			if (getName().size() > 0) {
				return getName().get(getName().size() - 1);
			}
			return "";
		};

	/**
	 * The definition of an attribute consists of kind, name and type.
	 *
	 * @attribute Kind
	 *                wether the attribute is inherited or synthesized
	 * @attribute Name
	 *                name of the attribute
	 * @attribute Type
	 *                type of the attribute, can be a rulereference or an
	 *                external type
	 */
	AttributeDefinition = 
	
    Kind:["inh"|"syn"|"global"] Name ( ":" Type:ReferenceInAttributes ("{" Overrides* "}" | ";") | "{" Overrides+ "}" );
  
    Overrides = Rules:(Name || ",")+ ":" Type:ReferenceInAttributes ";" ;
    
//-----------------------------------------------------------------------------
// copied (and marginally modified) from mc.grammar.Grammar	  
	interface ReferenceInAttributes;  
	
	RuleReferenceInAttribute implements ReferenceInAttributes =
		Name (Iterated:["*"])? ;

	ExternalAttributeType implements ReferenceInAttributes = 
		"/" GenericAttributeType ;
	  
	ast ExternalAttributeType =
		method public String getTypeName() {
			return "/"+ getGenericAttributeType().toString();	
		}
		method public boolean isExternal() {
			return true;
		};

	GenericAttributeType  = 
		(Name:Name | Name:"grammar" | Name:"ast") ("." (Name:Name | Name:"grammar" | Name:"ast") )* ("<" Generic:GenericAttributeType ("," Generic:GenericAttributeType)*  ">")? {a.setDimension(0);}  ("[""]"{a.setDimension(a.getDimension()+1);} )*;

	ast GenericAttributeType =
		method public String toString() {
			return  de.monticore.grammar.HelperGrammar.printGenericType(this);
		};

	ast GenericAttributeType =
		Dimension: /int;  
}
