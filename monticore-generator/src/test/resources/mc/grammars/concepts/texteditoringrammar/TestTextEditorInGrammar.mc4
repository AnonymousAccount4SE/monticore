/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package mc.grammars.concepts.texteditoringrammar;

component grammar TestTextEditorInGrammar extends mc.grammars.literals.TestLiterals {
			
     token NUM = ('0'..'9')+;

	TextEditorInGrammarConcept=
		 "{" 
		   (Keywords: KeywordDefinition)?
		   (Foldings: FoldingDefinition)?
		   (Segments:SegmentDefinition)* 		   
		   ("categories" "{" (Category:CategoryDefinition)* "}")? 
		   ("filters" "{" (Filter:FilterDefinition)* "}")?		   
		"}";
	
	ast TextEditorInGrammarConcept =
	
		method public String toString(){
			return "";
		};	
	
	KeywordDefinition=
		"keywords" ":" Keywords:(WordDefinition || ",")+ ";";

	FoldingDefinition=
		"foldable" ":" Foldables: WordDefinition ("," Foldables: WordDefinition)* ";";

	CategoryDefinition=
		(Overriding:["overrides"])? Name  ( "(" Weight:NUM ")" )? ":" Member:(Name || ",")+ ";";
		
	FilterDefinition=
		FilterName:Name ":" SegmentType:(Name || ",")+ "(" (PluginName: String ",")? PicturePath: String ")" (ToolTip: String)? ";"			
	;	

	SegmentDefinition=
		(TopLevel:["toplevel"])? "segment" ":" Rule:Name ( "("  (PluginName: String ",")? PicturePath: String  ")" )?
		"show" ":" ( ToString:["toString"]  | ( Components:Component)*  | methodDeclaration:Method ) ";";
	
	external Method;
	
	interface Component;	
		
	SimpleString implements Component=
		String:String;
		
	Attribute implements Component =
		Name ("." Method:Name "(" ")")* ( "[" Separator: String "]" )? ;
	
	//keywords must be added explicit here because of the use in the above Segmentdefinition
	WordDefinition=
		Word:Name | Word:"catch" | | Word:"try" | Word:"return" | Word:"protected";
		
}
