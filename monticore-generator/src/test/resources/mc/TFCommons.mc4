/* (c) https://github.com/MontiCore/monticore */
package mc;

/**
*  Version of TFCommons for testing.
*
*/
component grammar TFCommons  {


PackageDeclaration = "package";

MCImportStatement = "import";

  TfIdentifier =
        identifier:Name
         |
        ("[[" identifier:Name ":-" newIdentifier:Name "]]")
         |
        "Name" identifier:Name ";";

  TFFolding = "folding" "{" FoldingSet* "}";

  /**
  * A folding tuple is a list of at least two foldable objects in parentheses
  */
  FoldingSet =
      "(" ObjectNames:Name ("," ObjectNames:Name)+ ")";

  TFAssignments = "assign" "{" Assign* "}";

  Assign = variable:Name "="  ";" ;

  TFWhere = "where" "{"  "}";

  TFDo = "do"  ;

  TFUndo = "undo"  ;


    ReplacementOp astimplements de.monticore.tf.ast.IReplacementOperator =
      ":-" |
      (":" (first:"first" | last:"last" | identifier:Name) "-");

  astrule ReplacementOp =
      method public boolean isFirst() {
        return isPresentFirst();
      }
      method public boolean isLast() {
        return isPresentLast();
      }
      method public boolean hasIdentifier() {
        return isPresentIdentifier();
      }
  ;


  astrule TfIdentifier =
          method public boolean isNewIdentifierFix() {
              return getNewIdentifier().isPresent() && !getNewIdentifier().get().startsWith("$");
          }
          method public boolean isIdentifierFix() {
              return getIdentifier().isPresent() && !getIdentifier().get().startsWith("$");
          }
      ;

    TFRule =
      ((ITFPart)* TFFolding? TFAssignments? TFWhere? TFDo? TFUndo?) |
      (PackageDeclaration? MCImportStatement* ("transformation" Name)? "{" (ITFPart)* TFFolding? TFAssignments? TFWhere? TFDo? TFUndo? "}");

    interface ITFPart;

    TFPartDummy implements ITFPart<9999> = "tfPartDummy";

    // for testing
    token Name =
            ( 'a'..'z' | 'A'..'Z' | '_' | '$' )( 'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '$' )*;

    fragment token NEWLINE =
        ('\r' '\n' |
        '\r' |
        '\n' ):
      ;

      token WS =
        (' ' |
        '\t' |
         '\r' '\n' |
        '\r' |
        '\n' ) :{_channel = HIDDEN;};

      token SL_COMMENT =
        "//" (~('\n' |
          '\r' )
        )* :
        { _channel = HIDDEN;
          if (getCompiler() != null) {
            de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
            de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
            _comment.set_SourcePositionStart(startPos);
            _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
            getCompiler().addComment(_comment);
          }
        };

      token ML_COMMENT =
        "/*" ({_input.LA(2) != '/'}?'*' |
         NEWLINE |
          ~('*' |
          '\n' |
          '\r' )
        )*
        "*/" :
        { _channel = HIDDEN;
          if (getCompiler() != null) {
            de.monticore.ast.Comment _comment = new de.monticore.ast.Comment(getText());
            de.se_rwth.commons.SourcePosition startPos = new de.se_rwth.commons.SourcePosition(_tokenStartLine, _tokenStartCharPositionInLine);
            _comment.set_SourcePositionStart(startPos);
            _comment.set_SourcePositionEnd(getCompiler().computeEndPosition(startPos, getText()));
            getCompiler().addComment(_comment);
          }
        };

}
