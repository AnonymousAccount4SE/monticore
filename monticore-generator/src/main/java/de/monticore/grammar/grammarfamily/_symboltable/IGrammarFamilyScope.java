/* generated from model GrammarFamily */
/* generated by template core.Interface*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.grammar.grammarfamily._symboltable;

/* generated by template core.Imports*/

import de.monticore.symboltable.ISymbol;
import de.se_rwth.commons.logging.Log;

import java.util.HashSet;
import java.util.List;
import java.util.Set;


public  interface IGrammarFamilyScope extends IGrammarFamilyScopeTOP {

  /*
   * Override again with default as CD4A introduces a custom behavior which is not desired here.
   */
  @Override
  default boolean checkIfContinueAsSubScope(String symbolName) {
    if (this.isExportingSymbols()) {
      final List<String> nameParts = getNameParts(symbolName).toList();

      if (nameParts.size() > 1) {
        final String firstNamePart = nameParts.get(0);
        // A scope that exports symbols usually has a name.
        if (this.isPresentName()) {
          return firstNamePart.equals(this.getName());
        }
        else {
          return firstNamePart.equals("");
        }
      }
    }

    return false;
  }

}
