/* generated from model GrammarFamily */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.grammar.grammarfamily._symboltable;

/* generated by template core.Imports*/

import de.monticore.symbols.basicsymbols._symboltable.DiagramSymbol;
import de.monticore.symboltable.ImportStatement;
import de.monticore.symboltable.modifiers.AccessModifier;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.function.Predicate;


public  class GrammarFamilyArtifactScope extends GrammarFamilyArtifactScopeTOP {

  public GrammarFamilyArtifactScope(String packageName, List<ImportStatement> imports) {
    super(packageName, imports);
  }

  public GrammarFamilyArtifactScope(Optional<IGrammarFamilyScope> enclosingScope, String packageName, List<ImportStatement> imports) {
    super(enclosingScope, packageName, imports);
  }

  public GrammarFamilyArtifactScope() {
  }

  public List<DiagramSymbol> resolveDiagramDownMany (boolean foundSymbols,
                                                     String name,
                                                     AccessModifier modifier,
                                                     Predicate<DiagramSymbol> predicate)
  {
    // skip resolution of the symbol, if the symbol has already been resolved in this scope instance
    // during the current execution of the resolution algorithm
    if (isDiagramSymbolsAlreadyResolved()) {
      return new ArrayList<>();
    }

    // (1) resolve symbol locally. During this, the 'already resolved' flag is set to true,
    // to prevent resolving cycles caused by cyclic symbol adapters
    setDiagramSymbolsAlreadyResolved(true);
    final List<DiagramSymbol> resolvedSymbols = this.resolveDiagramLocallyMany(foundSymbols, name, modifier, predicate);
    setDiagramSymbolsAlreadyResolved(false);

    return resolvedSymbols;
  }


}
