/* generated from model Grammar_WithConcepts */
/* generated by template core.Class*/

/* (c) https://github.com/MontiCore/monticore */
package de.monticore.grammar.grammarfamily._symboltable;

import de.monticore.grammar.grammar._ast.ASTMCGrammar;
import de.monticore.grammar.grammar_withconcepts._parser.Grammar_WithConceptsParser;
import de.monticore.grammar.grammar_withconcepts._symboltable.IGrammar_WithConceptsArtifactScope;
import de.monticore.io.paths.MCPath;
import de.monticore.io.paths.ModelCoordinate;
import de.monticore.io.paths.ModelCoordinates;
import de.monticore.io.paths.ModelPath;
import de.se_rwth.commons.logging.Log;

import java.io.IOException;
import java.io.Reader;
import java.util.Optional;
import java.util.Set;


public class GrammarFamilyGlobalScope extends GrammarFamilyGlobalScopeTOP {
  public GrammarFamilyGlobalScope(ModelPath modelPath, String modelFileExtension) {
    super(modelPath, modelFileExtension);
  }

  public GrammarFamilyGlobalScope() {
    super();
  }

  @Override
  public GrammarFamilyGlobalScope getRealThis() {
    return this;
  }

  @Override
  public  void loadMCGrammar (String name) {
    for (String modelName : calculateModelNamesForMCGrammar(name)) {
      loadGrammarFileForModelName(modelName);
    }
  }

  public  void loadGrammarFileForModelName (String modelName)  {
    // 1. call super implementation to start with employing the DeSer
    // super.loadFileForModelName(modelName);

    ModelCoordinate model = ModelCoordinates.createQualifiedCoordinate(modelName, "mc4");
    String filePath = model.getQualifiedPath().toString();
    if (!isFileLoaded(filePath)) {

      // 2. calculate potential location of model file and try to find it in model path
      model = getModelPath().resolveModel(model);

      // 3. if the file was found, parse the model and create its symtab
      if (model.hasLocation()) {
        ASTMCGrammar ast = parse(model);
        IGrammar_WithConceptsArtifactScope artScope = new GrammarFamilyPhasedSTC().createFromAST(ast);
        addSubScope(artScope);
        addLoadedFile(filePath);
      }
    }
  }

  private ASTMCGrammar parse(ModelCoordinate model){
    try {
      Reader reader = ModelCoordinates.getReader(model);
      Optional<ASTMCGrammar> optAST = new Grammar_WithConceptsParser().parse(reader);
      if(optAST.isPresent()){
        return optAST.get();
      }
    }
    catch (IOException e) {
      Log.error("0x1A234 Error while parsing model", e);
    }
    return null;
  }

  public Set<String> calculateModelNamesForMCGrammar (String name)  {
    /* generated by template _symboltable.iglobalscope.CalculateModelNamesFor*/
    return com.google.common.collect.Sets.newHashSet(name);
  }

  public  de.monticore.io.paths.MCPath getSymbolPath ()  {
    /* generated by template methods.Get*/

    return null;

  }

  /* generated by template core.Method*/
  public  void setSymbolPath (de.monticore.io.paths.MCPath symbolPath)  {
    /* generated by template methods.Set*/


  }

}
