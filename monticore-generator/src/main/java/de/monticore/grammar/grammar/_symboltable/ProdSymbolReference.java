// (c) https://github.com/MontiCore/monticore

/* generated by template symboltable.SymbolReference*/



package de.monticore.grammar.grammar._symboltable;

import com.google.common.base.Preconditions;
import com.google.common.base.Strings;
import de.monticore.grammar.grammar._ast.ASTProd;
import de.monticore.symboltable.modifiers.AccessModifier;
import de.monticore.symboltable.references.ISymbolReference;
import de.se_rwth.commons.logging.Log;

import java.util.Optional;
import java.util.function.Predicate;


/**
 * Represents a reference of {@link ProdSymbol}.
 */
public class ProdSymbolReference extends ProdSymbolReferenceTOP {

  public ProdSymbolReference(String name, IGrammarScope enclosingScopeOfReference) {
    super(name, enclosingScopeOfReference);
  }

  protected Optional<ProdSymbol> loadReferencedSymbol() {
    Preconditions.checkArgument(!Strings.isNullOrEmpty(name), " 0xA4070 Symbol name may not be null or empty.");

    Log.debug("Load full information of '" + name + "' (Kind " + "ProdSymbol" + ").",
        ProdSymbolReference.class.getSimpleName());
    Optional<ProdSymbol> resolvedSymbol = enclosingScope.resolveProd(name, accessModifier, predicate);

    if (resolvedSymbol.isPresent()) {
      Log.debug("Loaded full information of '" + name + "' successfully.",
          ProdSymbolReference.class.getSimpleName());
      referencedSymbol = resolvedSymbol.get();

    }
    else {
      Log.debug("Cannot load full information of '" + name,
          ProdSymbolReference.class.getSimpleName());
    }
    return resolvedSymbol;
  }


}

