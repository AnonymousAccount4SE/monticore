/* generated by template symboltable.ModelingLanguage*/




package de.monticore.grammar.grammar._symboltable;

import java.util.LinkedHashSet;
import java.util.Set;
import de.monticore.IModelingLanguage;


public abstract class GrammarLanguage implements IModelingLanguage<GrammarModelLoader> {

  private GrammarModelLoader modelLoader;

  private String name;

  private String fileEnding;


  public GrammarLanguage(String langName, String fileEnding) {
    this.name = langName;
    this.fileEnding = fileEnding;
    this.modelLoader = provideModelLoader();
  }


  public GrammarSymbolTableCreatorDelegator getSymbolTableCreator(IGrammarScope enclosingScope) {
    return new GrammarSymbolTableCreatorDelegator(enclosingScope);
  }

  public GrammarModelLoader getModelLoader() {
     return modelLoader;
   }

  @Override
  public String getName() {
    return name;
  }

  @Override
  public String getFileExtension() {
    return fileEnding;
  }

  protected GrammarModelLoader provideModelLoader() {
    return new GrammarModelLoader(this);
  }

  protected Set<String> calculateModelNamesForMCType(String name) {
    final Set<String> modelNames = new LinkedHashSet<>();
    modelNames.add(name);
    return modelNames;
  }

  protected Set<String> calculateModelNamesForMCGrammar(String name) {
    final Set<String> modelNames = new LinkedHashSet<>();
    modelNames.add(name);
    return modelNames;
  }

  protected Set<String> calculateModelNamesForAdditionalAttribute(String name) {
    final Set<String> modelNames = new LinkedHashSet<>();
    modelNames.add(name);
    return modelNames;
  }

  protected Set<String> calculateModelNamesForProd(String name) {
    final Set<String> modelNames = new LinkedHashSet<>();
    modelNames.add(name);
    return modelNames;
  }


}
