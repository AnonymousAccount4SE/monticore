/* (c) https://github.com/MontiCore/monticore */

package de.monticore.grammar.grammar._symboltable;

import static com.google.common.collect.ImmutableList.copyOf;
import static de.monticore.symboltable.modifiers.AccessModifier.ALL_INCLUSION;
import static de.se_rwth.commons.logging.Log.errorIfNull;
import static java.util.Optional.empty;
import static java.util.Optional.of;

import java.util.*;

import de.monticore.grammar.grammar._ast.ASTProd;
import de.monticore.symboltable.CommonScopeSpanningSymbol;
import de.monticore.symboltable.IScopeSpanningSymbol;
import de.monticore.symboltable.SymbolKind;
import de.monticore.symboltable.modifiers.AccessModifier;
import de.se_rwth.commons.Names;

public class MCProdSymbol implements ICommonGrammarSymbol, IScopeSpanningSymbol {

  protected IGrammarScope enclosingScope;

  protected String fullName;

  protected String name;

  protected ASTProd node;

  protected String packageName;

  protected AccessModifier accessModifier = ALL_INCLUSION;

  protected IGrammarScope spannedScope;

  private boolean isStartProd = false;

  private boolean isInterface;

  private boolean isAbstract;

  private boolean isExternal;

  private boolean isEnum;

  private boolean isLexerProd;

  private boolean isScope = false;

  /**
   * the producution that defines the symbol kind of the current prod symbol
   * (only if isSymbolDefinition is true)
   */
  private String prodDefiningSymbolKind = "";

  /**
   * A extends B, C = ...
   */
  private final List<MCProdSymbolReference> superProds = new ArrayList<>();

  /**
   * A implements B, C = ...
   */
  private final List<MCProdSymbolReference> superInterfaceProds = new ArrayList<>();

  /**
   * A astextends B, C, external.java.Type
   */
  private List<MCProdOrTypeReference> astSuperClasses = new ArrayList<>();

  /**
   * A implements B, C, external.java.Type
   */
  private List<MCProdOrTypeReference> astSuperInterfaces = new ArrayList<>();

  public IGrammarScope getSpannedScope() {
    return spannedScope;
  }

  public void setSpannedScope(IGrammarScope scope) {
    this.spannedScope = scope;
    getSpannedScope().setSpanningSymbol(this);
  }


  /* generated by template symboltable.symbols.GetAstNodeMethod*/


  public Optional<de.monticore.grammar.grammar._ast.ASTProd> getAstNode() {
    return Optional.ofNullable(node);
  }

  public void setAstNode(de.monticore.grammar.grammar._ast.ASTProd node) {
    this.node = node;
  }

  public void accept(de.monticore.grammar.grammar._visitor.GrammarSymbolVisitor visitor) {
    visitor.handle(this);
  }




  public IGrammarScope getEnclosingScope(){
    return this.enclosingScope;
  }

  public void setEnclosingScope(IGrammarScope newEnclosingScope){
    this.enclosingScope = newEnclosingScope;
  }

  @Override
  public void setAccessModifier(AccessModifier accessModifier) {
    this.accessModifier = accessModifier;
  }

  @Override
  public AccessModifier getAccessModifier() {
    return this.accessModifier;
  }

  @Override public String getName() {
    return name;
  }

  @Override public String getPackageName() {
    if (packageName == null) {
      packageName = determinePackageName();
    }

    return packageName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }

  public String getFullName() {
    if (fullName == null) {
      fullName = determineFullName();
    }

    return fullName;
  }

  protected String determinePackageName() {
    Optional<? extends IGrammarScope> optCurrentScope = Optional.ofNullable(enclosingScope);

    while (optCurrentScope.isPresent()) {
      final IGrammarScope currentScope = optCurrentScope.get();
      if (currentScope.isSpannedBySymbol()) {
        // If one of the enclosing scope(s) is spanned by a symbol, take its
        // package name. This check is important, since the package name of the
        // enclosing symbol might be set manually.
        return currentScope.getSpanningSymbol().get().getPackageName();
      } else if (currentScope instanceof GrammarArtifactScope) {
        return ((GrammarArtifactScope) currentScope).getPackageName();
      }

      optCurrentScope = currentScope.getEnclosingScope();
    }

    return "";
  }

  /**
   * Determines <b>dynamically</b> the full name of the symbol.
   *
   * @return the full name of the symbol determined dynamically
   */
  protected String determineFullName() {
    if (enclosingScope == null) {
      // There should not be a symbol that is not defined in any scope. This case should only
      // occur while the symbol is built (by the symbol table creator). So, here the full name
      // should not be cached yet.
      return name;
    }

    final Deque<String> nameParts = new ArrayDeque<>();
    nameParts.addFirst(name);

    Optional<? extends IGrammarScope> optCurrentScope = Optional.of(enclosingScope);

    while (optCurrentScope.isPresent()) {
      final IGrammarScope currentScope = optCurrentScope.get();
      if (currentScope.isSpannedBySymbol()) {
        // If one of the enclosing scope(s) is spanned by a symbol, the full name
        // of that symbol is the missing prefix, and hence, the calculation
        // ends here. This check is important, since the full name of the enclosing
        // symbol might be set manually.
        nameParts.addFirst(currentScope.getSpanningSymbol().get().getFullName());
        break;
      }

      if (!(currentScope instanceof IGrammarGlobalScope)) {
        if (currentScope instanceof GrammarArtifactScope) {
          // We have reached the artifact scope. Get the package name from the
          // symbol itself, since it might be set manually.
          if (!getPackageName().isEmpty()) {
            nameParts.addFirst(getPackageName());
          }
        } else {
          if (currentScope.getName().isPresent()) {
            nameParts.addFirst(currentScope.getName().get());
          }
          // ...else stop? If one of the enclosing scopes is unnamed,
          //         the full name is same as the simple name.
        }
      }
      optCurrentScope = currentScope.getEnclosingScope();
    }

    return Names.getQualifiedName(nameParts);
  }

  public MCProdSymbol(String name) {
    this.name = name;
  }

  public boolean isStartProd() {
    return isStartProd;
  }

  public void setStartProd(boolean isStartProd) {
    this.isStartProd = isStartProd;
  }

  public boolean isSymbolDefinition() {
    return !prodDefiningSymbolKind.isEmpty();
  }

  public boolean isScopeDefinition() {
    return isScope;
  }

  public void setScopeDefinition(boolean isScope) {
    this.isScope = isScope;
  }

  public Optional<String> getSymbolDefinitionKind() {
    if (isSymbolDefinition()) {
      return of(prodDefiningSymbolKind);
    }
    return empty();
  }

  public void setProdDefiningSymbolKind(String prodDefiningSymbolKind) {
    this.prodDefiningSymbolKind = prodDefiningSymbolKind;
  }

  public MCProdComponentSymbol addProdComponent(MCProdComponentSymbol prodComp) {
    errorIfNull(prodComp);

    MCProdComponentSymbol prevProdComp = getProdComponent(prodComp.getName()).orElse(null);

    if (prevProdComp != null) {
      // a prod component is a list (*), if at list one of the prod components
      // is a list
      prevProdComp.setList(prevProdComp.isList() || prodComp.isList());
      return prevProdComp;
    } else {
      getSpannedScope().add(prodComp);
    }
    return prodComp;
  }

  public Collection<MCProdComponentSymbol> getProdComponents() {
    return getSpannedScope().getLocalMCProdComponentSymbols();
  }

  public Optional<MCProdComponentSymbol> getProdComponent(String componentName) {
    return getSpannedScope().resolveMCProdComponentLocally(componentName);
  }

  public void addProdAttribute(MCProdAttributeSymbol attributeSymbol) {
    errorIfNull(attributeSymbol);
    getSpannedScope().add(attributeSymbol);
  }

  public Collection<MCProdAttributeSymbol> getProdAttributes() {
    return getSpannedScope().getLocalMCProdAttributeSymbols();
  }

  public Optional<MCProdAttributeSymbol> getProdAttribute(String attributeName) {
    return getSpannedScope().resolveAdditionalAttributeLocally(attributeName);
  }

  public void addSuperProd(MCProdSymbolReference superProdRef) {
    this.superProds.add(errorIfNull(superProdRef));
  }

  public List<MCProdSymbolReference> getSuperProds() {
    return copyOf(superProds);
  }

  public void addSuperInterfaceProd(MCProdSymbolReference superInterfaceProdRef) {
    this.superInterfaceProds.add(errorIfNull(superInterfaceProdRef));
  }

  public List<MCProdSymbolReference> getSuperInterfaceProds() {
    return copyOf(superInterfaceProds);
  }

  public void addAstSuperClass(MCProdOrTypeReference ref) {
    astSuperClasses.add(errorIfNull(ref));
  }

  public List<MCProdOrTypeReference> getAstSuperClasses() {
    return copyOf(astSuperClasses);
  }

  public void addAstSuperInterface(MCProdOrTypeReference ref) {
    astSuperInterfaces.add(errorIfNull(ref));
  }

  public List<MCProdOrTypeReference> getAstSuperInterfaces() {
    return copyOf(astSuperInterfaces);
  }

  /**
   * @return true, if production is a class production (which is the default)
   */
  public boolean isClass() {
    return !isInterface() && !isAbstract() && !isExternal() && !isEnum() && !isLexerProd();
  }

  public void setInterface(boolean anInterface) {
    isInterface = anInterface;
  }

  public boolean isInterface() {
    return isInterface;
  }

  public void setAbstract(boolean anAbstract) {
    isAbstract = anAbstract;
  }

  public boolean isAbstract() {
    return isAbstract;
  }

  public void setExternal(boolean external) {
    isExternal = external;
  }

  public boolean isExternal() {
    return isExternal;
  }

  public void setEnum(boolean anEnum) {
    isEnum = anEnum;
  }

  public boolean isEnum() {
    return isEnum;
  }

  public boolean isParserProd() {
    return isClass() || isAbstract();
  }

  public void setLexerProd(boolean lexerProd) {
    isLexerProd = lexerProd;
  }

  public boolean isLexerProd() {
    return isLexerProd;
  }

  public static class MCProdKind implements SymbolKind {

    private static final String NAME = MCProdKind.class.getName();

    protected MCProdKind() {
    }

    @Override
    public String getName() {
      return NAME;
    }

    @Override
    public boolean isKindOf(SymbolKind kind) {
      return NAME.equals(kind.getName()) || SymbolKind.super.isKindOf(kind);
    }

  }
}
