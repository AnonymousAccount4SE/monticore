/* generated by template symboltable.GlobalScope*/




package de.monticore.grammar.grammar._symboltable;

import de.monticore.io.paths.ModelPath;
import de.monticore.symboltable.modifiers.AccessModifier;

import java.util.*;
import java.util.function.Predicate;

public  class GrammarGlobalScope extends GrammarGlobalScopeTOP  {

  protected Collection<de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate> adaptedMCGrammarSymbolDelegateList = new HashSet<de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate>();
  
  protected Collection<IMCProdAttributeSymbolDelegate> adaptedMCProdAttributeSymbolDelegateList = new HashSet<IMCProdAttributeSymbolDelegate>();
  
  protected Collection<IMCProdSymbolDelegate> adaptedMCProdSymbolDelegateList = new HashSet<IMCProdSymbolDelegate>();

  public GrammarGlobalScope(ModelPath modelPath, GrammarLanguage grammarLanguage) {
    super(modelPath, grammarLanguage);
  }

  @Override
  public Collection<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> resolveAdaptedMCGrammar(boolean foundSymbols, String symbolName, AccessModifier modifier, Predicate<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> predicate){
    List<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> adaptedSymbols = new ArrayList<de.monticore.grammar.grammar._symboltable.MCGrammarSymbol>();
    for (de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate symDel : adaptedMCGrammarSymbolDelegateList) {
      adaptedSymbols.addAll(symDel.resolveAdaptedMCGrammarSymbol(foundSymbols, symbolName, modifier, predicate));
    }
    return adaptedSymbols;
  }
  
  @Override
  public Collection<de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol> resolveAdaptedAdditionalAttribute(boolean foundSymbols, String symbolName, AccessModifier modifier, Predicate<de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol> predicate){
    List<de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol> adaptedSymbols = new ArrayList<de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol>();
    for (IMCProdAttributeSymbolDelegate symDel : adaptedMCProdAttributeSymbolDelegateList) {
      adaptedSymbols.addAll(symDel.resolveAdaptedAdditionalAttributeSymbol(foundSymbols, symbolName, modifier, predicate));
    }
    return adaptedSymbols;
  }
  
  @Override
  public Collection<de.monticore.grammar.grammar._symboltable.MCProdSymbol> resolveAdaptedProd(boolean foundSymbols, String symbolName, AccessModifier modifier, Predicate<de.monticore.grammar.grammar._symboltable.MCProdSymbol> predicate){
    List<de.monticore.grammar.grammar._symboltable.MCProdSymbol> adaptedSymbols = new ArrayList<de.monticore.grammar.grammar._symboltable.MCProdSymbol>();
    for (IMCProdSymbolDelegate symDel : adaptedMCProdSymbolDelegateList) {
      adaptedSymbols.addAll(symDel.resolveAdaptedProdSymbol(foundSymbols, symbolName, modifier, predicate));
    }
    return adaptedSymbols;
  }
  

  public Collection<de.monticore.types.mcbasictypes._symboltable.IMCTypeSymbolDelegate> getAdaptedMCTypeSymbolDelegateList(){
    return adaptedMCTypeSymbolDelegateList;
  }
  
  public void setAdaptedMCTypeSymbolDelegateList(Collection<de.monticore.types.mcbasictypes._symboltable.IMCTypeSymbolDelegate> adaptedMCTypeSymbolDelegateList) {
    this.adaptedMCTypeSymbolDelegateList = adaptedMCTypeSymbolDelegateList;
  }
  
  public void addAdaptedMCTypeSymbolDelegate(de.monticore.types.mcbasictypes._symboltable.IMCTypeSymbolDelegate MCTypeSymbolDelegate) {
    this.adaptedMCTypeSymbolDelegateList.add(MCTypeSymbolDelegate);
  }
  
  public Collection<de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate> getAdaptedMCGrammarSymbolDelegateList(){
    return adaptedMCGrammarSymbolDelegateList;
  }
  
  public void setAdaptedMCGrammarSymbolDelegateList(Collection<de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate> adaptedMCGrammarSymbolDelegateList) {
    this.adaptedMCGrammarSymbolDelegateList = adaptedMCGrammarSymbolDelegateList;
  }
  
  public void addAdaptedMCGrammarSymbolDelegate(de.monticore.grammar.grammar._symboltable.IMCGrammarSymbolDelegate MCGrammarSymbolDelegate) {
    this.adaptedMCGrammarSymbolDelegateList.add(MCGrammarSymbolDelegate);
  }
  
  public Collection<IMCProdAttributeSymbolDelegate> getAdaptedMCProdAttributeSymbolDelegateList(){
    return adaptedMCProdAttributeSymbolDelegateList;
  }
  
  public void setAdaptedMCProdAttributeSymbolDelegateList(Collection<IMCProdAttributeSymbolDelegate> adaptedMCProdAttributeSymbolDelegateList) {
    this.adaptedMCProdAttributeSymbolDelegateList = adaptedMCProdAttributeSymbolDelegateList;
  }
  
  public void addAdaptedMCProdAttributeSymbolDelegate(IMCProdAttributeSymbolDelegate MCProdAttributeSymbolDelegate) {
    this.adaptedMCProdAttributeSymbolDelegateList.add(MCProdAttributeSymbolDelegate);
  }
  
  public Collection<IMCProdSymbolDelegate> getAdaptedMCProdSymbolDelegateList(){
    return adaptedMCProdSymbolDelegateList;
  }
  
  public void setAdaptedMCProdSymbolDelegateList(Collection<IMCProdSymbolDelegate> adaptedMCProdSymbolDelegateList) {
    this.adaptedMCProdSymbolDelegateList = adaptedMCProdSymbolDelegateList;
  }
  
  public void addAdaptedMCProdSymbolDelegate(IMCProdSymbolDelegate MCProdSymbolDelegate) {
    this.adaptedMCProdSymbolDelegateList.add(MCProdSymbolDelegate);
  }
  
}
