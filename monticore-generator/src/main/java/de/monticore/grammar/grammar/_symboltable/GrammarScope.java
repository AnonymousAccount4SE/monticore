/* generated by template symboltable.Scope*/






package de.monticore.grammar.grammar._symboltable;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.LinkedListMultimap;

import de.monticore.ast.ASTNode;
import de.monticore.symboltable.*;
import de.se_rwth.commons.logging.Log;

public  class GrammarScope implements de.monticore.grammar.grammar._symboltable.IGrammarScope {

  protected LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol> MCProdAttributesymbols = LinkedListMultimap.create();

  protected LinkedListMultimap<String, de.monticore.types.mcbasictypes._symboltable.MCTypeSymbol> mctypesymbols = LinkedListMultimap.create();

  protected LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdSymbol> MCProdSymbols = LinkedListMultimap.create();

  protected LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdComponentSymbol> MCProdComponentSymbols = LinkedListMultimap.create();

  protected LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> mcgrammarsymbols = LinkedListMultimap.create();

  protected de.monticore.grammar.grammar._symboltable.IGrammarScope enclosingScope;

  protected List<de.monticore.grammar.grammar._symboltable.IGrammarScope> subScopes = new ArrayList<>();

  protected Optional<IScopeSpanningSymbol> spanningSymbol = Optional.empty();

  protected boolean shadowing;

  protected boolean exportsSymbols = true;

  protected Optional<String> name;

  protected ASTNode astNode;

  public GrammarScope() {
    super();
    this.name = Optional.empty();
  }

  public GrammarScope(boolean isShadowingScope) {
    this.shadowing = isShadowingScope;
    this.name = Optional.empty();
  }

  public GrammarScope(de.monticore.grammar.grammar._symboltable.IGrammarScope enclosingScope) {
    this(enclosingScope, false);
  }

  public GrammarScope(de.monticore.grammar.grammar._symboltable.IGrammarScope enclosingScope, boolean isShadowingScope) {
    this.enclosingScope = enclosingScope;
    this.shadowing = isShadowingScope;
    this.name = Optional.empty();
  }

  @Override
  public void addSubScope(de.monticore.grammar.grammar._symboltable.IGrammarScope subScope) {
    if (!subScopes.contains(subScope)) {
      this.subScopes.add(subScope);
      subScope.setEnclosingScope(this);
    }
  }

  @Override
  public void removeSubScope(de.monticore.grammar.grammar._symboltable.IGrammarScope subScope) {
    this.subScopes.remove(subScope);
  }

  public void setSpanningSymbol(IScopeSpanningSymbol symbol) {
    this.spanningSymbol =  Optional.of(symbol);
    setName(symbol.getName());
  }

  @Override
  public void setExportsSymbols(boolean b) {
    this.exportsSymbols = b;
  }

   public Optional<IScopeSpanningSymbol> getSpanningSymbol() {
    return this.spanningSymbol;
  }

  public Optional<de.monticore.grammar.grammar._symboltable.IGrammarScope> getEnclosingScope() {
    return Optional.ofNullable(enclosingScope);
  }

  public void setEnclosingScope(de.monticore.grammar.grammar._symboltable.IGrammarScope newEnclosingScope) {
    if ((this.enclosingScope != null) && (newEnclosingScope != null)) {
      if (this.enclosingScope == newEnclosingScope) {
        return;
      }
      Log.warn("0xA1042 Scope \"" + getName() + "\" has already an enclosing scope.");
    }

    // remove this scope from current (old) enclosing scope, if exists.
    if (this.enclosingScope != null) {
      this.enclosingScope.removeSubScope(this);
    }

    // add this scope to new enclosing scope, if exists.
    if (newEnclosingScope != null) {
      newEnclosingScope.addSubScope(this);
    }

    // set new enclosing scope (or null)
    this.enclosingScope = newEnclosingScope;
  }

  public List<de.monticore.grammar.grammar._symboltable.IGrammarScope> getSubScopes() {
    return ImmutableList.copyOf(subScopes);
  }

  public void setSubScopes(List<de.monticore.grammar.grammar._symboltable.IGrammarScope> subScopes) {
    this.subScopes = subScopes;
  }

  @Override
  public boolean isShadowingScope() {
    return shadowing;
  }

  @Override
  public boolean isSpannedBySymbol() {
    return spanningSymbol.isPresent();
  }

  @Override
  public boolean exportsSymbols() {
    return exportsSymbols;
  }

  @Override
  public void setAstNode(ASTNode node) {
    this.astNode = node;
  }

  @Override
  public Optional<ASTNode> getAstNode() {
    return Optional.ofNullable(astNode);
  }

  @Override
  public void setName(String name) {
    this.name = Optional.ofNullable(name);
  }

  @Override
  public Optional<String> getName() {
    return this.name;
  }

  @Override public int getSymbolsSize() {
    return MCProdAttributesymbols.size() + mctypesymbols.size() + MCProdSymbols.size() + mcgrammarsymbols.size();
  }

  @Override public void add(de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol symbol) {
    this.MCProdAttributesymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);

  }

  @Override public void remove(de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol symbol) {
    this.MCProdAttributesymbols.remove(symbol.getName(), symbol);
  }

  public LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdAttributeSymbol> getMCProdAttributeSymbols() {
    return this.MCProdAttributesymbols;
  }

  @Override public void add(de.monticore.types.mcbasictypes._symboltable.MCTypeSymbol symbol) {
    this.mctypesymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);

  }

  @Override public void remove(de.monticore.types.mcbasictypes._symboltable.MCTypeSymbol symbol) {
    this.mctypesymbols.remove(symbol.getName(), symbol);
  }

  public LinkedListMultimap<String, de.monticore.types.mcbasictypes._symboltable.MCTypeSymbol> getMCTypeSymbols() {
    return this.mctypesymbols;
  }

  @Override public void add(de.monticore.grammar.grammar._symboltable.MCProdSymbol symbol) {
    this.MCProdSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);

  }

  @Override public void remove(de.monticore.grammar.grammar._symboltable.MCProdSymbol symbol) {
    this.MCProdSymbols.remove(symbol.getName(), symbol);
  }

  public LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdSymbol> getMCProdSymbols() {
    return this.MCProdSymbols;
  }

  @Override public void add(de.monticore.grammar.grammar._symboltable.MCGrammarSymbol symbol) {
    this.mcgrammarsymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);

  }

  @Override public void remove(de.monticore.grammar.grammar._symboltable.MCGrammarSymbol symbol) {
    this.mcgrammarsymbols.remove(symbol.getName(), symbol);
  }

  public LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCGrammarSymbol> getMCGrammarSymbols() {
    return this.mcgrammarsymbols;
  }


    public void accept(de.monticore.grammar.grammar._visitor.GrammarScopeVisitor visitor) {
    visitor.handle(this);
    }

  @Override
  public void addSubScope(de.monticore.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope) {
    addSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void removeSubScope(de.monticore.mcliteralsbasis._symboltable.IMCLiteralsBasisScope subScope) {
    removeSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void setEnclosingScope(de.monticore.mcliteralsbasis._symboltable.IMCLiteralsBasisScope newEnclosingScope) {
    setEnclosingScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) newEnclosingScope);
  }
  @Override
  public void addSubScope(de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope subScope) {
    addSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void removeSubScope(de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope subScope) {
    removeSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void setEnclosingScope(de.monticore.types.mccollectiontypes._symboltable.IMCCollectionTypesScope newEnclosingScope) {
    setEnclosingScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) newEnclosingScope);
  }
  @Override
  public void addSubScope(de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope subScope) {
    addSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void removeSubScope(de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope subScope) {
    removeSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void setEnclosingScope(de.monticore.types.mcsimplegenerictypes._symboltable.IMCSimpleGenericTypesScope newEnclosingScope) {
    setEnclosingScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) newEnclosingScope);
  }
  @Override
  public void addSubScope(de.monticore.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope) {
    addSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void removeSubScope(de.monticore.mccommonliterals._symboltable.IMCCommonLiteralsScope subScope) {
    removeSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void setEnclosingScope(de.monticore.mccommonliterals._symboltable.IMCCommonLiteralsScope newEnclosingScope) {
    setEnclosingScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) newEnclosingScope);
  }
  @Override
  public void addSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope) {
    addSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void removeSubScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope subScope) {
    removeSubScope((de.monticore.grammar.grammar._symboltable.IGrammarScope) subScope);
  }

  @Override
  public void setEnclosingScope(de.monticore.types.mcbasictypes._symboltable.IMCBasicTypesScope newEnclosingScope) {
    setEnclosingScope((IGrammarScope) newEnclosingScope);
  }

  public void accept(de.monticore.mcbasics._visitor.MCBasicsScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.mcbasics._visitor.MCBasicsScopeVisitor.");
    }
  }
  public void accept(de.monticore.mcliteralsbasis._visitor.MCLiteralsBasisScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.mcliteralsbasis._visitor.MCLiteralsBasisScopeVisitor.");
    }
  }
  public void accept(de.monticore.types.mcbasictypes._visitor.MCBasicTypesScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.types.mcbasictypes._visitor.MCBasicTypesScopeVisitor.");
    }
  }
  public void accept(de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.types.mcsimplegenerictypes._visitor.MCSimpleGenericTypesScopeVisitor.");
    }
  }
  public void accept(de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.types.mccollectiontypes._visitor.MCCollectionTypesScopeVisitor.");
    }
  }
  public void accept(de.monticore.mccommonliterals._visitor.MCCommonLiteralsScopeVisitor visitor) {
    if (visitor instanceof de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) {
      accept((de.monticore.grammar.grammar._visitor.GrammarScopeVisitor) visitor);
    } else {
      throw new UnsupportedOperationException("0xA7010x758 Scope node type GrammarScope expected a visitor of type de.monticore.grammar.grammar._visitor.GrammarScopeVisitor, but got de.monticore.mccommonliterals._visitor.MCCommonLiteralsScopeVisitor.");
    }
  }

  @Override public void add(de.monticore.grammar.grammar._symboltable.MCProdComponentSymbol symbol) {
    this.MCProdComponentSymbols.put(symbol.getName(), symbol);
    symbol.setEnclosingScope(this);

  }

  @Override public void remove(de.monticore.grammar.grammar._symboltable.MCProdComponentSymbol symbol) {
    this.MCProdComponentSymbols.remove(symbol.getName(), symbol);
  }

  public LinkedListMultimap<String, de.monticore.grammar.grammar._symboltable.MCProdComponentSymbol> getMCProdComponentSymbols() {
    return this.MCProdComponentSymbols;
  }
    }
