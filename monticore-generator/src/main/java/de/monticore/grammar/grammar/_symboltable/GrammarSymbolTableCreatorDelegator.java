/* generated by template symboltable.SymbolTableCreatorDelegator*/




package de.monticore.grammar.grammar._symboltable;

import de.monticore.grammar.grammar._ast.ASTMCGrammar;
import de.monticore.grammar.grammar_withconcepts._visitor.Grammar_WithConceptsDelegatorVisitor;

import java.util.ArrayDeque;
import java.util.Deque;

public class GrammarSymbolTableCreatorDelegator extends Grammar_WithConceptsDelegatorVisitor {

  protected Deque<de.monticore.grammar.grammar._symboltable.IGrammarScope> scopeStack = new ArrayDeque<>();

  protected final GrammarSymbolTableCreator grammarSTC;


  public GrammarSymbolTableCreatorDelegator(IGrammarScope enclosingScope) {
    this.scopeStack.push(enclosingScope);
    MCCommonLiteralsSTCForGrammar mCCommonLiteralsSymbolTableCreator = new MCCommonLiteralsSTCForGrammar(scopeStack);
    setMCCommonLiteralsVisitor(mCCommonLiteralsSymbolTableCreator);
    MCSimpleGenericTypesSTCForGrammar mCSimpleGenericTypesSymbolTableCreator = new MCSimpleGenericTypesSTCForGrammar(scopeStack);
    setMCSimpleGenericTypesVisitor(mCSimpleGenericTypesSymbolTableCreator);
    MCLiteralsBasisSTCForGrammar mCLiteralsBasisSymbolTableCreator = new MCLiteralsBasisSTCForGrammar(scopeStack);
    setMCLiteralsBasisVisitor(mCLiteralsBasisSymbolTableCreator);
    MCCollectionTypesSTCForGrammar mCCollectionTypesSymbolTableCreator = new MCCollectionTypesSTCForGrammar(scopeStack);
    setMCCollectionTypesVisitor(mCCollectionTypesSymbolTableCreator);
    MCBasicTypesSTCForGrammar mCBasicTypesSymbolTableCreator = new MCBasicTypesSTCForGrammar(scopeStack);
    setMCBasicTypesVisitor(mCBasicTypesSymbolTableCreator);

    grammarSTC = new GrammarSymbolTableCreator(scopeStack);
    setGrammarVisitor(grammarSTC);
  }

  public GrammarArtifactScope createFromAST(ASTMCGrammar rootNode) {
    return grammarSTC.createFromAST(rootNode);
  }
}
