/*
 * ******************************************************************************
 * MontiCore Language Workbench
 * Copyright (c) 2015, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

/* generated from model null*/
/* generated by template symboltable.ModelingLanguage*/




package mc.embedding.transitive.transhost._symboltable;

import java.util.Optional;

import mc.embedding.transitive.transhost._parser.TransStartMCParser;
import mc.embedding.transitive.transhost._parser.TransHostParserFactory;
import de.monticore.ast.ASTNode;
import de.monticore.modelloader.ModelingLanguageModelLoader;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolverConfiguration;

public class TransHostLanguage extends TransHostLanguageTOP {

  public final static String FILE_ENDING = "transhost";
  public TransHostLanguage() {
    super("Trans Host Language", FILE_ENDING);
  }

  @Override
  public TransStartMCParser getParser() {
    return TransHostParserFactory.createTransStartMCParser();
  }

  @Override
  public Optional<TransHostSymbolTableCreator> getSymbolTableCreator(
      ResolverConfiguration resolverConfiguration, MutableScope enclosingScope) {
    return Optional.of(new TransHostSymbolTableCreator(resolverConfiguration, enclosingScope));
  }

  @Override
  public TransHostModelLoader getModelLoader() {
    return (TransHostModelLoader) super.getModelLoader();
  }

  //@Override
  //protected TransHostModelLoader provideModelLoader() {
  //  return new TransHostModelLoader(this);
  //}

  protected void initResolvingFilters() {
    addResolver(new TransHostResolvingFilter());
    addResolver(new TransStartResolvingFilter());
  }

  /**
   * @see de.monticore.CommonModelingLanguage#provideModelLoader()
   */
  @Override
  protected TransHostModelLoader provideModelLoader() {
    return new TransHostModelLoader(this);
  }
}
