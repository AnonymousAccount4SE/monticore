/*
 * ******************************************************************************
 * MontiCore Language Workbench
 * Copyright (c) 2015, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

/* generated from model null*/
/* generated by template symboltable.SymbolTableCreator*/




package mc.embedding.transitive.transhost._symboltable;

import java.util.Deque;

import mc.embedding.transitive.transhost._ast.ASTTransStart;
import mc.embedding.transitive.transhost._visitor.TransHostVisitor;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolverConfiguration;

public class TransHostSymbolTableCreator extends TransHostSymbolTableCreatorTOP {

  private TransHostVisitor realThis = this;
  
  public TransHostSymbolTableCreator(
    final ResolverConfiguration resolverConfig, final MutableScope enclosingScope) {
    super(resolverConfig, enclosingScope);
  }

  public TransHostSymbolTableCreator(final ResolverConfiguration resolverConfig, final Deque<MutableScope> scopeStack) {
    super(resolverConfig, scopeStack);
  }

  /**
   * @see mc.embedding.transitive.transhost._visitor.TransHostVisitor#visit(mc.embedding.transitive.transhost._ast.ASTTransStart)
   */
  @Override
  public void visit(ASTTransStart node) {
    TransStartSymbol symbol = new TransStartSymbol(node.getName());
    putInScopeAndLinkWithAst(symbol, node);
  }
  
  /**
   * @see mc.embedding.transitive.transhost._visitor.TransHostVisitor#setRealThis(mc.embedding.transitive.transhost._visitor.TransHostVisitor)
   */
  @Override
  public void setRealThis(TransHostVisitor realThis) {
    this.realThis = realThis;
  }
  /**
   * @see mc.embedding.transitive.transhost._visitor.TransHostVisitor#getRealThis()
   */
  @Override
  public TransHostVisitor getRealThis() {
    return realThis;
  }

}
