/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package mc.feature.fautomaton.automatonwithaction;

component grammar ActionAutomaton extends mc.feature.fautomaton.automaton.FlatAutomaton {

	external Action;

    /** A finite automaton
	@attribute name Name of the automaton
    @attribute Counter List of all counters
    @attribute State List of all states
    @attribute Transition List of all transitions
	*/
	Automaton =
	   "automaton" Name "{" 
	     (Counter | State | Transition )*
	   "}";

    /** A Counter represents a variable in the automaton
   	@attribute Name of the counter
    */
	Counter =
	  "counter" Name ("," Name)* ";" ;
	  
    /** A transition in a finite automaton with embedded action
    @attribute from The source of the transition
    @attribute activate Character that triggers the transition
 	@attribute to The target of the transition
    @attribute Action Embedded action
    */
	// TODO SO, GV: TransitionWithAction extends Transition = from:Name "-" activate:Name "[" Action "]" ">" to:Name ";" ;

}
