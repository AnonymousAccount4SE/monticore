/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package mc.feature.hwc;

/**
 * Basic grammar to tag non-functional properties
 *
 * @author Michael von Wenckstern
 */
grammar Tagging1 extends mc.grammar.types.ItTestTypes { 

  scope TaggingUnit =
    ("package" package:(Name& || ".")+ ";")? 
    (ImportStatement)*
    "conforms" "to" (QualifiedName || ",")+ ";"
	TagBody;
	
	// name should be optional, but than we need an transformation step in the parser
	// b/c the symbol table needs a name
	// and we need the symbol table for coco checks
	// maybe later for convience we make the optional
	TagBody = "tags" Name? ("for" targetModel: Scope)? "{"
	   TagElement+ "}";
	   
	interface TagElement;
	
	// use Scope to add tags for Model, e.g.
	// grammar ComponentTags extends MontiArc, Tagging {
	//   ComponentScope implements Scope = Component; }
	interface Scope;
	astrule Scope =
	  method public String getScopeKind() {
	    return "undefined";
	  };

	// this one is only defined here, to get Parser Tags
	NameScope implements Scope = QualifiedName;
	astrule NameScope =  
	  method public String getScopeKind() {
  	  return "NameScope";
  	};

	ConnectorScope extends NameScope = source:QualifiedName "->" QualifiedName;
  astrule ConnectorScope =
    method public String getScopeKind() {
      return "ConnectorScope";
    };

	Context implements TagElement = "within" Name "{"
	  TagElement+ "}";
	
	// the name from ML's tagging language
	TargetElement implements TagElement = "tag" (Scope || ",")+ "with" (Tag || ",")+ ";" ;
	
	interface Tag;
/*	astrule Tag =
	  method public String getName() {
	   return ""; 
	  }
	  method public String getTagKind() {
	    return "undefined"; // to avoid reflection
	  };*/   
	
	SimpleTag implements Tag = Name;
	astrule SimpleTag =
	  method public String getTagKind() {
  	    return "SimpleTag";
  	};
	
	ValuedTag implements Tag = Name "=" TagValue;
	astrule ValuedTag =
  	method public String getTagKind() {
       return "ValuedTag";
    };
	
	ComplexTag implements Tag = Name "{" (Tag || ",")+ ";" "}";
	astrule ComplexTag =
    method public String getTagKind() {
      return "ComplexTag";
    };

	 RegexTag implements Tag = Name "=" regex:Regex ;
	 astrule RegexTag =
     method public String getTagKind() {
       return "RegexTag";
     };

   token Regex = '[' (~('[' | ']') | String | Regex)+ ']';
	
	interface TagValue;
	astrule TagValue =
	  method public String getValueKind() {
	    return "undefined";
	  };
	
	StringTagValue implements TagValue = String;
	astrule StringTagValue =
	  method public String getValueKind() {
      return "StringValue";
    };

	NumericTagValue implements TagValue = NumericLiteral;
	astrule NumericTagValue =
	  method public String getValueKind() {
	    return "NumericValue";
	  };

	UnitTagValue implements TagValue = NumericLiteral unit:Name;
	astrule UnitTagValue =
	  method public String getValueKind() {
	    return "UnitValue";
	  };
}
