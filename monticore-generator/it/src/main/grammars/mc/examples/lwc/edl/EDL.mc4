/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package mc.examples.lwc.edl;

/**
* Entity Definition Language (EDL) for Language Workbench Comparison (LWC).
* It's a simple data definition language to define entities with properties. 
* Properties have a name and a type. 
* It's possible to use primitive types for properties (string, date and int), as well as other Entities.
*/
grammar EDL extends mc.grammar.lexicals.Lexicals {

  ////////// PRODUCTIONS //////////
  
  EDLCompilationUnit =
    ("package" package:(Name& || ".")+ ";")? 
    (MCImportStatement)*
    Entity;
    
  MCImportStatement = "import" importList:(Name& || ".")* ("." star:["*"])? ";" ;
  
  // This rule defines an entity
  Entity =
    "entity" Name "{" (Property)*
  "}" ;

  // This interface is implemented by all possible types of EDL language
  interface Type;
  
  // Primitive types
  StringLiteral implements Type = "string"; 
  
  IntLiteral implements Type = "int";
  
  DateLiteral implements Type = "date";
  
  // This type is a reference to another entity
  ReferenceType implements Type = QualifiedName;
  
  // The rule for a property
  Property = Type Name;
  
  // The rule for a qualified name
  QualifiedName = (Name || ".")*;
  
  
}
