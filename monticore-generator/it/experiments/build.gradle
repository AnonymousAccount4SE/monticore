/* (c) https://github.com/MontiCore/monticore */
import de.monticore.MCTask
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent
plugins {
   id "de.set.ecj" version "1.4.1" // Eclipse compiler as it's much faster than javac
  id "monticore" version "6.3.0" // MontiCore Plugin
}
allprojects {
  group = 'de.monticore'
  version = '6.3.0'
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'monticore'
  apply plugin: 'de.set.ecj'
  
  buildDir = file("$projectDir/target")
  
  ext.grammarDir = 'src/main/grammars'
  ext.grammar_version = '6.3.0'
  ext.mc_version = '6.3.0'
  ext.junit_version = '4.12'
  ext.outDir = "$buildDir/generated-sources/monticore/sourcecode"
  
  dependencies {
    implementation group:'de.monticore', name:'monticore-runtime', version:grammar_version
    implementation group:'de.se_rwth.commons', name:'se-commons-logging', version:"1.7.10-SNAPSHOT"
    implementation group:'de.se_rwth.commons', name:'se-commons-utilities', version:"1.7.10-SNAPSHOT"
    implementation group:'de.se_rwth.commons', name:'se-commons-groovy', version:"1.7.10-SNAPSHOT"
    implementation group:'de.monticore', name:'monticore-grammar', version:grammar_version
    testImplementation group:'ch.qos.logback', name: 'logback-classic', version: '1.1.2'
    testImplementation group:'junit', name:'junit', version:junit_version
    grammar group:'de.monticore', name:'monticore-grammar', version:grammar_version, classifier:"grammars"
    grammar group:'de.monticore', name:'monticore-runtime', version:grammar_version
  }
  
  tasks.withType(Test) {
    useJUnit()
    testLogging {
      // controls whether test output is shown
      showStandardStreams= ("false").equals(getProperty('showTestOutput'))? false : true
      showExceptions true
      showCauses true
      showStackTraces true
      exceptionFormat TestExceptionFormat.FULL
      info {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
      }
    }
    afterTest { desc, result ->
      logger.lifecycle "${desc.className} > ${desc.name} ${result.resultType}"
    }
    afterSuite { desc, result ->
      if (!desc.parent) { // will match the outermost suite
        def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        def startItem = '|  ', endItem = '  |'
        logger.lifecycle startItem + output + endItem
      }
    }
    reports {
      junitXml.enabled = false
      html.enabled = false
    }
  }


  repositories {
    if(("true").equals(getProperty('useLocalRepo'))){
      mavenLocal()
    }
    maven {
      credentials.username mavenUser
      credentials.password mavenPassword
      url repo
    }
  }
  
  sourceSets {
    main.java.srcDirs += [ outDir ]
  }
  
  // Fixes issue with java plugin in projects without resources
  compileTestJava.doFirst { mkdir sourceSets.main.output.resourcesDir }
  
    sourceCompatibility = '1.8'
  
  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.deprecation false
    options.warnings = false
  }
  
  compileJava {
    dependsOn project.collect { it.tasks.withType(MCTask) }
  }

}
