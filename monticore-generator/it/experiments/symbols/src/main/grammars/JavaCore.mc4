/* (c) https://github.com/MontiCore/monticore */

component grammar JavaCore extends de.monticore.MCBasics {

CompilationUnit =  TypeDeclaration* EOF ;

// Type declarations
interface TypeDeclaration;

// Usage of a type
interface Type;

//Type used in return statements
interface ReturnType;

symbol scope ClassDeclaration implements TypeDeclaration
    =   "class" Name 
        ("extends" superClass:Type)?
        ("implements" implementedInterfaces:(Type || ",")+)?
        ClassBody
    ;

symbol scope InterfaceDeclaration implements TypeDeclaration
    =   "interface" Name 
        ("extends" extendedInterfaces:(Type || ",")+)?
        ClassBody
    ;

scope ClassBody
    =   "{" ClassBodyDeclaration* "}"
    ;

interface ClassBodyDeclaration ;

MethodDeclaration implements ClassBodyDeclaration
    =   MethodSignature (JavaBlock | ";")
    ;

ConstructorDeclaration implements ClassBodyDeclaration
    =   Name FormalParameters 
    ;

FieldDeclaration implements ClassBodyDeclaration
    =   Type ";"
    ;

MethodSignature
    =   ReturnType Name FormalParameters 
    ;

VariableDeclarator
    =   DeclaratorId ("=" Expression)?
    ;

DeclaratorId
    =   Name (dim:"[" "]")*
    ;

FormalParameters
    =   "(" FormalParameterListing? ")"
    ;

FormalParameterListing
    =   (FormalParameter || ",")+ 
    ;

FormalParameter
    =   Type DeclaratorId
    ;

// STATEMENTS / BLOCKS

interface Statement ;

LocalVariableDeclarationStatement implements Statement
    =    Type (VariableDeclarator || ",")+ ";"
    ;

JavaBlock implements Statement
    =   "{" Statement* "}"
    ;

ExpressionStatement implements Statement
    =   Expression ";"
    ;

// EXPRESSIONS

Expression
    =   
    |   Expression "." Name
    |   "(" Expression ")"
    |   Name
    ;

}
