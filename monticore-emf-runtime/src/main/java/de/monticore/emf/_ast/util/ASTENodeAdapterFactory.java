package de.monticore.emf._ast.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.ecore.EObject;

import de.monticore.emf._ast.*;

/**
 * <!-- begin-user-doc --> The <b>Adapter Factory</b> for the model. It provides
 * an adapter <code>createXXX</code> method for each class of the model. <!--
 * end-user-doc -->
 */

public class ASTENodeAdapterFactory extends AdapterFactoryImpl {
  
  /**
   * The cached model package.
   */
  protected static ASTENodePackage modelPackage;
  
  /**
   * Creates an instance of the adapter factory.
   */
  public ASTENodeAdapterFactory() {
    if (modelPackage == null) {
      modelPackage = ASTENodePackage.eINSTANCE;
    }
  }
  
  /**
   * Returns whether this factory is applicable for the type of the object. <!--
   * begin-user-doc --> This implementation returns <code>true</code> if the
   * object is either the model's package or is an instance object of the model.
   * <!-- endEautomatonSwitch-user-doc -->
   * 
   * @return whether this factory is applicable for the type of the object.
   */
  @Override
  public boolean isFactoryForType(Object object) {
    if (object == modelPackage) {
      return true;
    }
    if (object instanceof EObject) {
      return ((EObject) object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }
  
  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   */
  protected ASTENodeSwitch<Adapter> modelSwitch =
      new ASTENodeSwitch<Adapter>() {
        /* generated by mc.codegen.emf.util.EAdapterFactorySwitchAdapter */
        @Override
        public Adapter caseENode(ASTENode object) {
          return createENodeAdapter();
        }
        
        @Override
        public Adapter defaultCase(EObject object) {
          return createEObjectAdapter();
        }
      };
  
  /**
   * Creates an adapter for the <code>target</code>.
   * 
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   */
  @Override
  public Adapter createAdapter(Notifier target) {
    return modelSwitch.doSwitch((EObject) target);
  }
  
  /* generated by mc.codegen.emf.util.EAdapterFactoryCreateAdapter */
  /**
   * Creates a new adapter <!-- begin-user-doc --> This default implementation
   * returns null so that we can easily ignore cases; it's useful to ignore a
   * case when inheritance will catch all the cases anyway. <!-- end-user-doc
   * -->
   * 
   * @return the new adapter.
   */
  public Adapter createENodeAdapter() {
    return null;
  }
  
  /**
   * Creates a new adapter for the default case. <!-- begin-user-doc --> This
   * default implementation returns null. <!-- end-user-doc -->
   * 
   * @return the new adapter.
   */
  public Adapter createEObjectAdapter() {
    return null;
  }
}
