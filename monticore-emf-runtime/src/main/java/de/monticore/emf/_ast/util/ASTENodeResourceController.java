package de.monticore.emf._ast.util;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

import de.monticore.emf._ast.ASTENode;
import de.monticore.emf._ast.ASTENodePackage;

import java.io.File;
import java.io.IOException;
import java.util.Collections;

public class ASTENodeResourceController {
  
  private static final ASTENodeResourceController INSTANCE = new ASTENodeResourceController();
  
  // Private constructor for Singleton-Pattern
  private ASTENodeResourceController() {
  }
  
  public static ASTENodeResourceController getInstance() {
    return INSTANCE;
  }
  
  public void createECoreFile() {
    
    // Create a resource set.
    ResourceSet resourceSet = new ResourceSetImpl();
    // Register the default resource factory -- only needed for stand-alone!
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());
    // Get the URI of the model file.
    URI fileURI = URI.createFileURI(new File("ASTENode.ecore").getAbsolutePath());
    // Create a resource for this file.
    Resource resource = resourceSet.createResource(fileURI);
    // Add instance of package to the contents.
    resource.getContents().add(ASTENodePackage.eINSTANCE);
    // Save the contents of the resource to the file system.
    try {
      resource.save(Collections.EMPTY_MAP);
    }
    catch (IOException e) {
      e.printStackTrace();
    }
    
  }
  
  /* generated by mc.codegen.emf.serialization.SerializeInstance */
  public void serializeASTClassInstance(ASTENode object) {
    serializeASTClassInstance(object, "ASTENode");
  }
  
  public void serializeASTClassInstance(ASTENode object, String fileName) {
    // Create a resource set.
    ResourceSet resourceSet = new ResourceSetImpl();
    // Register the default resource factory -- only needed for stand-alone!
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());
    // Get the URI of the model file.
    URI fileURI = URI.createFileURI(new File(fileName + ".xmi").getAbsolutePath());
    // Create a resource for this file.
    Resource resource = resourceSet.createResource(fileURI);
    // Add instance of package to the contents.
    resource.getContents().add(object);
    // Save the contents of the resource to the file system.
    try {
      resource.save(Collections.EMPTY_MAP);
    }
    catch (IOException e) {
      e.printStackTrace();
    }
  }
  
  /* generated by mc.codegen.emf.serialization.DeserializeInstance */
  public ASTENode deserializeASTENode() {
    return deserializeASTENode("ASTENode");
  }
  
  public ASTENode deserializeASTENode(String fileName) {
    // Initialize the model
    ASTENodePackage.eINSTANCE.eClass();
    
    ResourceSet resourceSet = new ResourceSetImpl();
    resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put(Resource.Factory.Registry.DEFAULT_EXTENSION, new XMIResourceFactoryImpl());
    URI fileURI = URI.createFileURI(new File(fileName + ".xmi").getAbsolutePath());
    Resource resource = resourceSet.getResource(fileURI, true);
    return (ASTENode) resource.getContents().get(0);
  }
  
}
