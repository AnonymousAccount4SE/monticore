/*
***************************************************************************************
Copyright (c) 2017, MontiCore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
***************************************************************************************
*/

package de.monticore;

component grammar AssignmentExpressions extends de.monticore.ExpressionsBasis {
		
IncSuffixExpression implements Expression <220> =
	Expression "++";
        
DecSuffixExpression implements Expression <220> =
	Expression "--";
        
PlusPrefixExpression implements Expression <210> =
	"+" Expression;

MinusPrefixExpression implements Expression <210> =
	"-" Expression;

IncPrefixExpression implements Expression <210> =
	"++" Expression;

DecPrefixExpression implements Expression <210> =
	"--" Expression;
	
BinaryAndExpression implements Expression <120> =
	leftExpression:Expression operator:"&"  rightExpression:Expression;
	
BinaryXorExpression implements Expression <110> =
	leftExpression:Expression operator:"^"  rightExpression:Expression;
	
BinaryOrOpExpression implements Expression <100> =
	leftExpression:Expression operator:"|"  rightExpression:Expression;
	
interface AssignmentExpression extends Expression = leftExpression:Expression operator:Name rightExpression:Expression;

RegularAssignmentExpression implements Expression <60>, AssignmentExpression =
	leftExpression:Expression operator:"="  rightExpression:Expression;
	
PlusAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"+=" rightExpression:Expression;
	
MinusAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"-=" rightExpression:Expression;

MultAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"*=" rightExpression:Expression;

DivideAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"/=" rightExpression:Expression;

AndAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"&=" rightExpression:Expression;

OrAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"|=" rightExpression:Expression;

BinaryXorAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"^=" rightExpression:Expression;

RightShiftAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:">>=" rightExpression:Expression;

LogicalRightAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:">>>=" rightExpression:Expression;

LeftShiftAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"<<=" rightExpression:Expression;

ModuloAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	leftExpression:Expression operator:"%=" rightExpression:Expression;

}
