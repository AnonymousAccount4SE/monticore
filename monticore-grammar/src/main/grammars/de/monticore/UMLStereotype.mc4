/*
***************************************************************************************
Copyright (c) 2017, MontiCore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
***************************************************************************************
*/
package de.monticore;

/**
 * Grammar for common elements of the UML/P-Language-Family
 */
component grammar UMLStereotype extends de.monticore.StringLiterals {

    /*========================================================================*/
    /*======================= AST extension ================================*/
    /*========================================================================*/
    
    ast Stereotype =
        method public boolean contains(String name) {
          for (ASTStereoValue sv : values) {
            if (sv.getName().equals(name)) {
              return true;
            }
          }
          return false;
        }
        method public boolean contains(String name, String value) {
          for (ASTStereoValue sv : values) {
            if (sv.getName().equals(name)) {
              return sv.getValue().equals(value);
            }
          }
          return false;
        }
        method public String getValue(String name) {
          for (ASTStereoValue sv : values) {
            if (sv.getName().equals(name)) {
              return sv.getValue();
            }
          }
          throw new java.util.NoSuchElementException();
        };
    
    ast StereoValue =
	// Caution: decoded value is in cache: so change of value leads 
	// to outdated result in getValue()
	content:String
        method public String getValue() {
	  if(content == null) {
	    if (text.isPresent()) {
	      content = de.monticore.MCLiteralsDecoder.decodeString(
	      			text.get().getValue());
	    } else {
	      content = "";   // absent value
	    }
	  }
	  return content;
        };

    /*========================================================================*/
    /*============================== GRAMMAR =================================*/
    /*========================================================================*/
    
    /** ASTStereotype represents Stereotypes in the UML/P
        @attribute values List of Values of this Stereotype
    */
    Stereotype =
        "<<" values:(StereoValue || ",")+ ">" ">" 
            // It is not possible to define ">>".
            // Parsing generic typs like "List<List<String>>" leads to problems.
            {((_input.LT(-2).getLine()==_input.LT(-1).getLine()) &&
	      (_input.LT(-1).getCharPositionInLine()==
	                   _input.LT(-2).getCharPositionInLine()+1))}?;
    
    /** ASTStereoValue represents a Value of a Stereotype in the UML/P
        @attribute name  Name of the Stereotype-Value
        @attribute text Content of the Stereotype (String including '"';
                          use getValue() for decoded String)
    */
    StereoValue =
        Name& ("=" text:StringLiteral)?;
    
}
