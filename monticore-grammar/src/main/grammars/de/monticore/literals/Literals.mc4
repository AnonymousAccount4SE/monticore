/*
***************************************************************************************
Copyright (c) 2015, MontiCore
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE.
***************************************************************************************
*/
package de.monticore.literals;

/**
 * This grammar defines Java compliant literals. The scope of this grammar is to
 * ease the reuse of literals structures in Java-like sublanguages, e.g., by 
 * grammar inheritance or grammar embedment.
 * The grammar contains literals from Java, e.g., Boolean, Char, String, ....
 *
 * @author Martin Schindler, Marita Breuer
 * 
 * Version Aug. 31rd, 2015
*/

grammar Literals extends de.monticore.lexicals.Lexicals {

  /*========================================================================*/
  /*======================= AST DEFINITIONS ================================*/
  /*========================================================================*/
  ast BooleanLiteral = 
    method public boolean getValue() {
      return this.source == ASTConstantsLiterals.TRUE;
    }
  ;

  ast CharLiteral = 
    method public char getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeChar(getSource());
      }
      catch (Exception e) {
        return ' ';
      }
    }
  ;

  ast StringLiteral = 
    method public String getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeString(getSource());
      }
      catch (Exception e) {
        return "";
      }
    }
  ;

  ast IntLiteral = 
    method public int getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeInt(getSource());
      }
      catch (NumberFormatException e) {
        return 0;
      }
    }
  ;

  ast SignedIntLiteral = 
    method public int getValue() {
      try {
        if (negative) {
          return - de.monticore.literals.LiteralsHelper.getInstance().decodeInt(getSource());
        }
        return de.monticore.literals.LiteralsHelper.getInstance().decodeInt(getSource());
       }
      catch (NumberFormatException e) {
        return 0;
      }
    }
  ;
  
  ast LongLiteral = 
    method public long getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeLong(getSource());
      }
      catch (NumberFormatException e) {
        return 0;
      }
    }
  ;

  ast SignedLongLiteral = 
    method public long getValue() {
      try {
        if (negative) {
          return -de.monticore.literals.LiteralsHelper.getInstance().decodeLong(getSource());
        }
        return de.monticore.literals.LiteralsHelper.getInstance().decodeLong(getSource());
      }
      catch (NumberFormatException e) {
        return 0;
      }
    }
  ;

  ast FloatLiteral = 
    method public float getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeFloat(getSource());
      }
      catch (NumberFormatException e) {
        return 0f;
      }
    }
  ;

  ast SignedFloatLiteral = 
    method public float getValue() {
      try {
        if (negative) {
          return -de.monticore.literals.LiteralsHelper.getInstance().decodeFloat(getSource());
        }
        return de.monticore.literals.LiteralsHelper.getInstance().decodeFloat(getSource());
       }
      catch (NumberFormatException e) {
        return 0f;
      }
    }
  ;

  ast DoubleLiteral = 
    method public double getValue() {
      try {
        return de.monticore.literals.LiteralsHelper.getInstance().decodeDouble(getSource());
      }
      catch (NumberFormatException e) {
        return 0d;
      }
    }
  ;

  ast SignedDoubleLiteral = 
    method public double getValue() {
      try {
        if (negative) {
          return -de.monticore.literals.LiteralsHelper.getInstance().decodeDouble(getSource());
        }
        return de.monticore.literals.LiteralsHelper.getInstance().decodeDouble(getSource());
      }
      catch (NumberFormatException e) {
        return 0d;
      } 
   }
  ;


  /*========================================================================*/
  /*======================= INTERFACE DEFINITIONS ==========================*/
  /*========================================================================*/

  /** ASTLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals)
    */
  interface Literal;


  /** ASTSignedLiteral is the interface for all literals (NullLiteral,
        BooleanLiteral, CharLiteral, StringLiteral and all NumericLiterals).
        Compared to Literal it also includes negative NumericLiterals
    */
  interface SignedLiteral;


  /** The interface ASTNumericLiteral combines the numeric literal types for
        Integer, Long, Float and Double
    */
  interface NumericLiteral extends Literal;


  /** The interface ASTNumericLiteral combines the numeric literal types for
        Integer, Long, Float and Double.
        Compared to NumericLiteral it also includes negative numbers.
    */
  interface SignedNumericLiteral extends SignedLiteral;


  /*========================================================================*/
  /*============================ PARSER RULES ==============================*/
  /*========================================================================*/
  
  /** ASTNullLiteral represents 'null'
    */
  NullLiteral implements Literal, SignedLiteral =
    "null";


  /** ASTBooleanLiteral represents "true" or "false"
        @attribute source String-representation (including '"').
    */
  BooleanLiteral implements Literal, SignedLiteral =
    source:["true" | "false"];


  /** ASTCharLiteral represents any valid character parenthesized with "'".
        @attribute source String-representation (including "'").
    */
  CharLiteral implements Literal, SignedLiteral =
    source:Char;


  /** ASTStringLiteral represents any valid character sequence parenthesized
        with '"'.
        @attribute source String-representation (including '"').
    */
  StringLiteral implements Literal, SignedLiteral =
    source:String;


  /** ASTIntLiteral represents a positive Integer number.
        @attribute source String-representation (including '"').
    */
  IntLiteral implements NumericLiteral =
    source:Num_Int;


  /** ASTSignedIntLiteral represents a positive or negative Integer number.
        @attribute source String-representation (including '"').
    */
  SignedIntLiteral implements SignedNumericLiteral =
    (negative:["-"])? source:Num_Int;


  /** ASTLongLiteral represents a positive Long number.
        @attribute source String-representation (including '"').
    */
  LongLiteral implements NumericLiteral =
    source:Num_Long;


  /** ASTSignedLongLiteral represents a positive or negative Long number.
        @attribute source String-representation (including '"').
    */
  SignedLongLiteral implements SignedNumericLiteral =
    (negative:["-"])? source:Num_Long;


  /** ASTFloatLiteral represents a positive Float number.
        @attribute source String-representation (including '"').
    */
  FloatLiteral implements NumericLiteral =
    source:Num_Float;


  /** ASTSignedFloatLiteral represents a positive or negative Float number.
        @attribute source String-representation (including '"').
    */
  SignedFloatLiteral implements SignedNumericLiteral =
    (negative:["-"])? source:Num_Float;


  /** ASTDoubleLiteral represents a positive Double number.
        @attribute source String-representation (including '"').
    */
  DoubleLiteral implements NumericLiteral =
    source:Num_Double;


  /** ASTSignedDoubleLiteral represents a positive or negative Double number.
        @attribute source String-representation (including '"').
    */
  SignedDoubleLiteral implements SignedNumericLiteral =
    (negative:["-"])? source:Num_Double;


  /*========================================================================*/
  /*============================ LEXER RULES ===============================*/
  /*========================================================================*/
  

  /*========================================================================*/
  /* The following section is adapted from                                  */
  /* https://github.com/antlr/grammars-v4/blob/master/java/Java.g4          */
  /*========================================================================*/
  
  // ยง3.10.1 Integer Literals

  token Num_Int
    = DecimalIntegerLiteral | HexIntegerLiteral | OctalIntegerLiteral | BinaryIntegerLiteral;

  token Num_Long
    = (DecimalIntegerLiteral IntegerTypeSuffix) | (HexIntegerLiteral IntegerTypeSuffix) | (OctalIntegerLiteral IntegerTypeSuffix) | (BinaryIntegerLiteral IntegerTypeSuffix);

  fragment token DecimalIntegerLiteral
    = DecimalNumeral;

  fragment token HexIntegerLiteral
    = HexNumeral;

  fragment token OctalIntegerLiteral
    = OctalNumeral;

  fragment token BinaryIntegerLiteral
    = BinaryNumeral;

  fragment token IntegerTypeSuffix
    = 'l' | 'L';

  fragment token DecimalNumeral
    = '0' | NonZeroDigit ((Digits)? | Underscores Digits);

  fragment token Digits
    = Digit ((DigitOrUnderscore)* Digit)?;

  fragment token Digit
    = '0' | NonZeroDigit;

  fragment token NonZeroDigit
    = '1'..'9' ;

  fragment token DigitOrUnderscore
    = Digit | '_';

  fragment token Underscores
    = '_'+;

  fragment token HexNumeral
    = '0' ('x' | 'X') HexDigits;

  fragment token HexDigits
    = HexDigit ((HexDigitOrUnderscore)* HexDigit)?;

  fragment token HexDigit
    = '0'..'9'  | 'a'..'f'  | 'A'..'F' ;

  fragment token HexDigitOrUnderscore
    = HexDigit | '_';

  fragment token OctalNumeral
    = '0' (Underscores)? OctalDigits;

  fragment token OctalDigits
    = OctalDigit ((OctalDigitOrUnderscore)* OctalDigit)?;

  fragment token OctalDigit
    = '0'..'7' ;

  fragment token OctalDigitOrUnderscore
    = OctalDigit | '_';

  fragment token BinaryNumeral
    = '0' ('b' | 'B') BinaryDigits;

  fragment token BinaryDigits
    = BinaryDigit ((BinaryDigitOrUnderscore)* BinaryDigit)?;

  fragment token BinaryDigit
    = '0' | '1';

  fragment token BinaryDigitOrUnderscore
    = BinaryDigit | '_';


  // ยง3.10.2 Floating-Point Literals
  
  token Num_Float
    = DecimalFloatingPointLiteral | HexadecimalFloatingPointLiteral;

  token Num_Double
    = DecimalDoublePointLiteral | HexadecimalDoublePointLiteral;

  fragment token DecimalDoublePointLiteral
    = Digits '.' (Digits)? (ExponentPart)? (DoubleTypeSuffix)? | '.' Digits (ExponentPart)? (DoubleTypeSuffix)? | Digits ExponentPart (DoubleTypeSuffix)? | Digits DoubleTypeSuffix;

  fragment token DecimalFloatingPointLiteral
    = Digits '.' (Digits)? (ExponentPart)? (FloatTypeSuffix) | '.' Digits (ExponentPart)? (FloatTypeSuffix) | Digits ExponentPart (FloatTypeSuffix) | Digits FloatTypeSuffix;

  fragment token ExponentPart
    = ExponentIndicator SignedInteger;

  fragment token ExponentIndicator
    = 'e' | 'E';

  fragment token SignedInteger
    = (Sign)? Digits;

  fragment token Sign
    = '+' | '-';

  fragment token FloatTypeSuffix
    = 'f' | 'F';

  fragment token DoubleTypeSuffix
    = 'd' | 'D';

  fragment token HexadecimalDoublePointLiteral
    = HexSignificand BinaryExponent (DoubleTypeSuffix)?;

  fragment token HexadecimalFloatingPointLiteral
    = HexSignificand BinaryExponent (FloatTypeSuffix);

  fragment token HexSignificand
    = HexNumeral '.'? | '0' ('x' | 'X') (HexDigits)? '.' HexDigits;

  fragment token BinaryExponent
    = BinaryExponentIndicator SignedInteger;

  fragment token BinaryExponentIndicator
    = 'p' | 'P';


  // ยง3.10.4 Character Literals
  token Char
    = '\'' (SingleCharacter|EscapeSequence) '\''
    : {setText(getText().substring(1, getText().length() - 1));};

  fragment token SingleCharacter
    = ~ ('\'');


  // ยง3.10.5 String Literals
  token String
    = '"' (StringCharacters)? '"'
    : {setText(getText().substring(1, getText().length() - 1));};

  fragment token StringCharacters
    = (StringCharacter)+;

  fragment token StringCharacter
    = ~ ('"' | '\\') | EscapeSequence;

  // ยง3.10.6 Escape Sequences for Character and String Literals
  fragment token EscapeSequence
    = '\\' ('b' | 't' | 'n' | 'f' | 'r' | '"' | '\'' | '\\') | OctalEscape | UnicodeEscape;

  fragment token OctalEscape
    = '\\' OctalDigit | '\\' OctalDigit OctalDigit | '\\' ZeroToThree OctalDigit OctalDigit;

  fragment token UnicodeEscape
    = '\\' 'u' HexDigit HexDigit HexDigit HexDigit;

  fragment token ZeroToThree
    = '0'..'3' ;

}

