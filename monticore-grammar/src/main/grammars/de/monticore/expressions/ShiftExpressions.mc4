/* (c) https://github.com/MontiCore/monticore */

package de.monticore.expressions;

component grammar ShiftExpressions extends de.monticore.expressions.ExpressionsBasis {

QualifiedNameExpression implements Expression <290> = 
	Expression "." Name;
	
ThisExpression implements Expression <280> =
	Expression "." "this";
		
ArrayExpression implements Expression <250> =
	Expression "[" indexExpression:Expression "]";

interface ShiftExpression =
	left:Expression shiftOp:"" right:Expression;

// It is not possible to define "<<", ">>" or ">>>" directly.
// Parsing generic types like "List<List<String>>" otherwise lead to problems.
// We therefor use the noSpsce workaraound to ensure that no space was
// found between the previous two token.
		
LeftShiftExpression implements Expression <160>, ShiftExpression =
	left:Expression 
	shiftOp:"<" "<" {noSpace()}? {_aNode.setShiftOp("<<");}        
    right:Expression;
 
RightShiftExpression implements Expression <160>, ShiftExpression =
	left:Expression 
	shiftOp:">" ">" {noSpace()}? {_aNode.setShiftOp(">>");}        
    right:Expression;

LogicalRightShiftExpression implements Expression <160>, ShiftExpression =
	left:Expression 
	shiftOp:">" ">" {noSpace()}? ">" {noSpace()}? {_aNode.setShiftOp(">>>");}        
    right:Expression;
    
PrimaryThisExpression implements Expression <320>
	= "this";

}
