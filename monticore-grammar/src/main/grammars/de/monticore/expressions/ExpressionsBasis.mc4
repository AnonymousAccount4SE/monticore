/* (c) https://github.com/MontiCore/monticore */
package de.monticore.expressions;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar defines core interfaces for expressions and the
 * kinds of symbols necessary.
 * A hierarchy of conservative extensions to this grammar realize
 * these interfaces in various forms.
 *
 * The language developer may choose the subset of expressions
 * of interest and combine these with the appropriate typing infrastructure
 *
 * This modularity of expressions and associated types greatly eases
 * the reuse of type structures in languages similar to Java
 *
 *
 * This grammar is part of a hierarchy of types, namely
 * * expressions/ExpressionsBasis.mc4
 * * --  expressions/CommonExpressions.mc4
 * * --  --  expressions/JavaClassExpressions.mc4
 * * --  --  expressions/SetExpressions.mc4
 * * --  expressions/AssignmentExpressions.mc4
 * * --  expressions/BitExpressions.mc4
 * * --  expressions/OCLExpressions.mc4
 *
*/

component grammar ExpressionsBasis extends de.monticore.MCBasics,
                                   // TODO: to add: de.monticore.types.MCBasicTypes,
                                   de.monticore.literals.MCLiteralsBasis {

  /*=================================================================*/

  /* Top level interface for all kinds of expressions
  */
  interface Expression;


  /*=================================================================*/

  /* Three forms of symbols that are used and applied in
   * expressions. They are typically defined outside of expressions
   * (although there are exceptions).
  */

  /** EMethod describes methods that can be called in expressions.
   * Methods have signatures (not described here).
  */
  @Deprecated
  symbol EMethod = Name;

  /** EVariable describes variables that can be used in expressions.
   * EVariables have types (not described here).
  */
  @Deprecated
  symbol EVariable = Name;

  /** ETypes describes types that can expressions can have.
  */
  @Deprecated
  symbol EType = Name;

  NameExpression implements Expression<350>
    = Name;

  LiteralExpression implements Expression<340>
    = Literal;

  /** Field access: e.g. obj.attr or also (b ? getobject() : obj).attribute
   *  This is similar to package names:
   *  So when the language shall also allow QualifiedNames as Expressions,
   *  they might be parsed here. E.g. in "x.y.Person", "x" might be
   *  parsed as NameExpression, even though it is a package name.
   *  This is to be resolved via SymbolTable
   */
  FieldAccessExpression implements Expression <290> =
  	Expression "." Name;

  @Deprecated    // will be replaced by FieldAccessExpression
  QualifiedNameExpression implements Expression <291> =
  	Expression "." Name;

}
