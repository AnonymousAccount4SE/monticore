/* (c) https://github.com/MontiCore/monticore */

package de.monticore.expressions;

component grammar AssignmentExpressions extends de.monticore.expressions.ExpressionsBasis {
		
IncSuffixExpression implements Expression <220> =
	Expression "++";
        
DecSuffixExpression implements Expression <220> =
	Expression "--";
        
PlusPrefixExpression implements Expression <210> =
	"+" Expression;

MinusPrefixExpression implements Expression <210> =
	"-" Expression;

IncPrefixExpression implements Expression <210> =
	"++" Expression;

DecPrefixExpression implements Expression <210> =
	"--" Expression;
	
BinaryAndExpression implements Expression <120> =
	left:Expression operator:"&"  right:Expression;
	
BinaryXorExpression implements Expression <110> =
	left:Expression operator:"^"  right:Expression;
	
BinaryOrOpExpression implements Expression <100> =
	left:Expression operator:"|"  right:Expression;
	
interface AssignmentExpression = left:Expression operator:"" right:Expression;

RegularAssignmentExpression implements Expression <60>, AssignmentExpression =
	left:Expression operator:"="  right:Expression;
	
PlusAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"+=" right:Expression;
	
MinusAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"-=" right:Expression;

MultAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"*=" right:Expression;

DivideAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"/=" right:Expression;

AndAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"&=" right:Expression;

OrAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"|=" right:Expression;

BinaryXorAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"^=" right:Expression;

RightShiftAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:">>=" right:Expression;

LogicalRightAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:">>>=" right:Expression;

LeftShiftAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"<<=" right:Expression;

ModuloAssignmentExpression implements Expression <60>, AssignmentExpression = <rightassoc>
	left:Expression operator:"%=" right:Expression;

}
