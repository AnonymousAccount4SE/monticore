/* (c) https://github.com/MontiCore/monticore */
package de.monticore.statements;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar defines the exception statements.
 * This includes Java try with catch and finally, as well as throw.
 *
 * This grammar is part of a hierarchy of statements, namely
 * * statements/MCStatementsBasis.mc4
 * * -- statements/MCAssertStatements.mc4
 * * -- statements/MCCommonStatements.mc4
 * * -- -- statements/MCExceptionStatements.mc4
 * * -- -- statements/MCSynchronizedStatements.mc4
 * * -- statements/MCLowLevelStatements.mc4
 * * -- statements/MCReturnStatements.mc4
 *
 * and the composition of all statement grammmars to full Java:
 * * -- -- statements/MCFullJavaStatements.mc4
 *
*/

component grammar MCExceptionStatements extends de.monticore.statements.MCCommonStatements {

// TODO, waere das nicht sauberer:
// MB ->BR: Die Implementierung ist analog zur Java-Spezifikation. Wenn wir das ändern, müssen wir
// mit zusätzlichen Cocos arbeiten, um nicht von der Java-Spec abzuweichen. Ich würde das also so
// lassen
//
// TODO
// BR -> MB: 1.3.20: Müssen wir uns strukturell an die Java-Grammatik halten?
// Ich sehe das nicht unbedingt so. Allerdings ist tatsächlich ein kleiner Unterschied:
// Java verlangt entweder wenigstens eine Resource oder einen catch-Block anzugeben; 
// meine Vereinfachung nicht.
//
// Wenn man dies einbaut wirds etwas komplexer, aber auch der Name "Resource" ist zum Beispiel unschön.
// wie wäre es mit folgender Lösung:
//
// TryStatement1 implements MCStatement
//     =   "try" 
//	   core:MCJavaBlock
//	   CatchClause+
// 	   ("finally" finally:MCJavaBlock)?
//     ;
// TryStatement2 implements MCStatement
//     =   "try" "(" (Resource || ";")+ ";"? ")"
//	   core:MCJavaBlock
//	   CatchClause*
// 	   ("finally" finally:MCJavaBlock)?
//     ;
// 
// + umbennenen von Resource in was passendes, zB TryLocalVariableDeclaration
// 
// und rausnehmen von ExceptionHandler, CatchExceptionsHandler, FinallyBlockOnlyHandler
// 	TryStatementWithResources

/* The Nonterminals could be simplified, but are left in this form,
   because this is compatible to the Java original.
*/

TryStatement implements MCStatement
    =   "try" MCJavaBlock ExceptionHandler
    ;

interface ExceptionHandler ;

CatchExceptionsHandler implements ExceptionHandler
    =   CatchClause+ ("finally" MCJavaBlock)?
    ;

FinallyBlockOnlyHandler implements ExceptionHandler
    =   "finally" MCJavaBlock
    ;

TryStatementWithResources implements MCStatement
    =   "try" "(" (Resource || ";")+ ";"? ")"
        MCJavaBlock
	CatchClause*
	("finally" finallyBlock:MCJavaBlock)?
    ;

// TODO: ist das nicht einfach eine lokale VariableDeclaration?
// MB -> BR: Im Gegenzug zur LocalVariableDeclaration kann man hier keine Listen angeben
// Dann wiederverwenden (auch wenn nur wenige Arten von Klassen hier einsetzbar sind)
//   --> das sind sowieso CoCos!
// und: hier wird eine Variable eingeführt! --> Symbol!
// MB -> BR: Das ist zur Zeit in einem anderen Branch in Arbeit

// TODO: BR -> MB: 1.3.20: 
// Umbenennen in TryLocalVariableDeclaration
Resource
    =   JavaModifier* MCType DeclaratorId "=" Expression
    ;

CatchClause
    =   "catch" "(" JavaModifier* CatchTypeList Name ")" MCJavaBlock
    ;

CatchTypeList
    =   (MCQualifiedName || "|")+
    ;

ThrowStatement implements MCStatement
    =   "throw" Expression ";"
    ;

}
