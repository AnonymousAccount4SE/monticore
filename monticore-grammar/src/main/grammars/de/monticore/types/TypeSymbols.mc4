/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/* Beta-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar is used to generate an abstract Syntax only.
 * These AST-classes are then used to store typing information
 * in the SymbolTable.
 *
 * The grammar introduces the symbols for
 * Types, Methods, Fields and TypeVariables
 *
 * These symbols can be used elsewhere, when actual implementations
 * of these symbols become available.
 *
*/

component grammar TypeSymbols extends de.monticore.types.BasicTypeSymbols {

  /*=================================================================*/

  /**
   * A type (in an OO sense) has a name,
   * methods, fields, supertypes.
   * All of them are represented as Symbols.
   */
  interface scope symbol OOType extends Type = Name;
  symbolrule OOType =
    isClass: boolean
    isInterface: boolean
    isEnum: boolean
    isAbstract: boolean
    isPrivate: boolean
    isProtected: boolean
    isPublic: boolean
    isStatic: boolean
  ;

  /*=================================================================*/

  /**
   * A Field (Java Attribute) has a type
   */
  interface symbol Field extends Variable = Name ;
  symbolrule Field =
    isParameter: boolean
    isVariable: boolean
    isPrivate: boolean
    isProtected: boolean
    isPublic: boolean
    isStatic:boolean
  ;

  /*=================================================================*/

  /**
   * A Method has a return type, and a list of parameters, which
   * are stored as field symbols.
   */
  interface symbol Method extends Function = Name;
  symbolrule Method =
    isConstructor: boolean
    isMethod: boolean
    isPrivate: boolean
    isProtected: boolean
    isPublic: boolean
    isStatic:boolean
  ;

}
