/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/**
 * This grammar introduces basic generics List<>, Map<,>, Set<>
 * and Optional<>
*/
component grammar MCCollectionTypes
     extends de.monticore.types.MCBasicTypes {

  start MCType;

  /**
  *  The interface ASTBasicGenerics can be used to restrict to BasicGenerics
  *  even if a extended Grammar
  * (MCGenericTypes.mc4) is included.
  */
  interface MCGenericType extends MCObjectType;


  // use LookAhead to avoid "List" etc. as keywords

  MCListType implements MCGenericType <200> =
       { cmpToken(1, "List") }? Name "<" MCTypeArgument ">";

  MCOptionalType implements MCGenericType <200> =
       { cmpToken(1, "Optional") }? Name "<" MCTypeArgument ">";

  MCMapType implements MCGenericType  <200> =
       { cmpToken(1, "Map") }? Name
       "<" key:MCTypeArgument "," value:MCTypeArgument ">";

  MCSetType implements MCGenericType <200> =
       { cmpToken(1, "Set") }? Name "<" MCTypeArgument ">";

  /**
  *  ASTTypeArgument interface introduced here as QualifiedType,
  *  more implementations to be added in subgrammars
  */
  interface MCTypeArgument ;

  MCBasicTypeArgument implements MCTypeArgument <200> =
       MCQualifiedType;

  MCPrimitiveTypeArgument implements MCTypeArgument <190> =
         MCPrimitiveType;
}