/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;


component grammar MCGenericTypes extends de.monticore.types.MCCustomGenericsTypes {
  start Type;

  /** ASTWildcardType represents a wildcard type in a type argument (generics)
          It could also contain an upper- or lower bound.
          @attribute upperBound Supertye of the type argument
          @attribute lowerBound Subtype of the type argument
  */
  WildcardType implements TypeArgument =
     "?" (
     ("extends" upperBound:Type) | ("super" lowerBound:Type)
     )?;

   ComplexReferenceType implements GenericReferenceType, Type =
           (BasicGenericsReferenceType || "." )+ // complex qualification
          "."  (Name& || ".")+ "<" (TypeArgument || ",")* ">"
          ;

  /** Array

  */

  ArrayType implements Type = Type ("[" "]"{_aNode.setDimensions(_aNode.getDimensions()+1);})+;
  astrule ArrayType =
          dimensions:int;
}