/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/**
 * This grammar introduces basic generics List<>, Map<,>, Set<> and Optional<>
*/
component grammar MCBasicGenericsTypes extends de.monticore.types.MCBasicTypes {

  start Type;

  interface GenericReferenceType extends ReferenceType;

  astrule GenericReferenceType =
    names:List<String>
    arguments:List<de.monticore.types.mcbasicgenericstypes._ast.ASTGenericArgument>
  ;


  ListType implements GenericReferenceType <200> = name:"List" "<" GenericArgument ">";

  OptionalType implements GenericReferenceType <200> = name:"Optional" "<" GenericArgument ">";

  MapType implements GenericReferenceType  <200> = name:"Map" "<" key:GenericArgument "," value:GenericArgument ">";

  SetType implements GenericReferenceType <200> = "Set" "<" GenericArgument ">";

  GenericArgument = QualifiedReferenceType;
}