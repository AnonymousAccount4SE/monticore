/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/**
 * This grammar introduces basic generics List<>, Map<,>, Set<> and Optional<>
*/
component grammar MCBasicGenericsTypes extends de.monticore.types.MCBasicTypes {

  start Type;

  interface GenericReferenceType extends ReferenceType = Name TypeArgument*;

  astrule GenericReferenceType =
    // names:List<String>
    // arguments:List<de.monticore.types.mcbasicgenericstypes._ast.ASTGenericArgument>
  ;


  ListType implements GenericReferenceType <200> = name:"List" "<" TypeArgument ">";

  OptionalType implements GenericReferenceType <200> = name:"Optional" "<" TypeArgument ">";

  MapType implements GenericReferenceType  <200> = name:"Map" "<" TypeArgument "," TypeArgument ">";

  SetType implements GenericReferenceType <200> = name:"Set" "<" TypeArgument ">";

  interface TypeArgument ;

  BasicTypeArgument implements TypeArgument = QualifiedReferenceType;


}