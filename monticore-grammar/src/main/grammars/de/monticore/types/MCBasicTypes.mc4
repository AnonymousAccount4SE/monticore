/* (c) https://github.com/MontiCore/monticore */
package de.monticore.types;

/**
 * This grammar defines a set of types. The scope of this grammar is to
 * ease the reuse of type structures in languages similar to Java,
 * but potentials simplified, e.g. without generics
 * by grammar inheritance or grammar embedding.
 * The grammar contains types from Java, e.g., primitives, void, 
 * classes (reference types).
 * It does not contain generics or arrays (which can be added 
 * in grammar extensions).
 *
*/
component grammar MCBasicTypes extends de.monticore.MCBasics {

    /*========================================================================*/
    /*= Qualified Names ======================================================*/
    /*========================================================================*/
    
    /** The ASTQualifiedName represents a possibly qualified name in the AST.
        The different parts of a qualified name are separated by '.'; they are
        stored in an ASTStringList.
        @attribute parts A List of ASTStringList concludes all name parts
    */
    QualifiedName =
        part:(Name || ".")+;

    astrule QualifiedName =
        method public String getQName(){
          return de.se_rwth.commons.Names.getQualifiedName(
              this.getPartList());
        };
    

    /*========================================================================*/
    /*= ImportStatement ======================================================*/
    /*========================================================================*/
    
    /** ImportStatement represents the import list for diagrams
        E.g.: import A.b;
        E.g.: import A.*;
    */
    ImportStatement =
    		"import" QualifiedName ("." Star:["*"])? ";" ;

    astrule ImportStatement =
        method public String getQName(){
          return getQualifiedName().getQName();
        };


    /*========================================================================*/
    /*= The Type Interfaces ==================================================*/
    /*========================================================================*/
    
    interface Type;

    interface PrimitiveType extends Type;


    /*========================================================================*/
    /*= Primitives ===========================================================*/
    /*========================================================================*/

    /** ASTPrimitiveType represents every primitive type supported by Java.
        The type is not realized by an enumeration, because enumerations cannot
        be extended.
        @attribute primitive BOOLEAN, BYTE, CHAR, SHORT, INT, FLOAT, LONG,
                                 or DOUBLE
    */
    PrimitiveType2 implements Type =
        primitive: ["boolean" | "byte" | "short" | "int" | "long" | "char" |"float" | "double"];

    astrule PrimitiveType2 =
                method public String toString(){
                  if (isBoolean()){
                    return "boolean";
                  }
                  if (isByte()){
                    return "byte";
                  }
                  if (isChar()){
                    return "char";
                  }
                  if (isShort()){
                    return "short";
                  }
                  if (isInt()){
                    return "int";
                  }
                  if (isFloat()){
                    return "float";
                  }
                  if (isLong()){
                    return "long";
                  }
                  if (isDouble()){
                    return "double";
                  }
                  return "";
                }
                method public boolean isBoolean(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.BOOLEAN;
                }
                method public boolean isByte(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.BYTE;
                }
                method public boolean isChar(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.CHAR;
                }
                method public boolean isShort(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.SHORT;
                }
                method public boolean isInt(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.INT;
                }
                method public boolean isFloat(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.FLOAT;
                }
                method public boolean isLong(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.LONG;
                }
                method public boolean isDouble(){
                  return this.getPrimitive()==ASTConstantsMCBasicTypes.DOUBLE;
                };
    /*========================================================================*/
    /*= Reference Types (Classes, Interfaces in OO) ==========================*/
    /*========================================================================*/
    
    interface ReferenceType extends Type;
    
    NameAsReferenceType implements ReferenceType =
    	(Name || ".")+;

    astrule NameAsReferenceType =
        method public String getQName(){
          return de.se_rwth.commons.Names.getQualifiedName(
              this.getNameList());
        };


    /*========================================================================*/
    /*= ReturnTypes and void =================================================*/
    /*========================================================================*/
    
    ReturnType = VoidType | Type;

    /** ASTVoidType represents the return type "void".
    */
    VoidType = "void";

}
