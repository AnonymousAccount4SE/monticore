/* (c) https://github.com/MontiCore/monticore */
package de.monticore;

/* This is a MontiCore stable grammar.
 * Adaptations -- if any -- are conservative. */

import de.monticore.statements.*;
import de.monticore.expressions.*;
import de.monticore.symbols.*;
import de.monticore.types.*;

/**
 * JavaLight is a subset of Java that MontiCore itself
 * uses as intermediate language for the code generation process.
 * JavaLight doesn't provide all forms of classes (e.g. inner classes)
 * and reduces the type system to normal generic types.
 *
 * However, that is suffiecient for the representation of all the code
 * generated by MontiCore.
 *
 * JavaLight can be used for other generator tools as well,
 * especially as core template are reusable and new templates
 * for specific method bodies can be added using MontiCore's
 * Hook-Mechanisms.
 *
*/

component grammar JavaLight extends AssignmentExpressions,
                                    JavaClassExpressions,
                                    MCCommonStatements {

external ExtTypeParameters;

interface ClassBodyDeclaration;

interface InterfaceBodyDeclaration;

ClassBlock implements ClassBodyDeclaration
    = (["static"])? MCJavaBlock;

interface scope symbol JavaMethod extends Method = Name;

symbolrule JavaMethod =
    exceptions: de.monticore.types.check.SymTypeExpression*
    annotations: de.monticore.types.check.SymTypeExpression*
    isAbstract: boolean
    isSynchronized: boolean
    isNative:boolean
    isStrictfp: boolean;

MethodDeclaration implements JavaMethod, 
                             ClassBodyDeclaration
    =   MCModifier* ExtTypeParameters?
               MCReturnType Name FormalParameters (dim:"[" "]")*
               ("throws" Throws)? (MCJavaBlock | ";");

InterfaceMethodDeclaration implements JavaMethod,
                                      InterfaceBodyDeclaration
    =   MCModifier* ExtTypeParameters?
                MCReturnType Name FormalParameters (dim:"[" "]")*
                ("throws" Throws)? ";";

ConstructorDeclaration implements JavaMethod, ClassBodyDeclaration
    =   MCModifier* ExtTypeParameters? Name FormalParameters
                ("throws" Throws)? MCJavaBlock;

ConstDeclaration extends LocalVariableDeclarationStatement
                implements ClassBodyDeclaration, 
		            InterfaceBodyDeclaration
    =   LocalVariableDeclaration ";";

Throws
    =   (MCQualifiedName || ",")+;

FormalParameter
    =   JavaModifier* MCType DeclaratorId;

LastFormalParameter
    =   JavaModifier*  MCType "..." DeclaratorId;

FormalParameterListing
    =   (FormalParameter || ",")+ ("," LastFormalParameter)?
    |   LastFormalParameter;

FormalParameters
    =   "(" FormalParameterListing? ")";

// ANNOTATIONS

Annotation implements MCModifier,  ElementValue
    =   "@" annotationName:MCQualifiedName
            ( "(" AnnotationArguments? ")" )?;

interface AnnotationArguments ;

AnnotationPairArguments implements AnnotationArguments
   =   (ElementValuePair || ",")+;

interface ElementValue;

ElementValueOrExpr implements AnnotationArguments
    = ElementValue | Expression;

ElementValuePair
    =   Name "=" ElementValueOrExpr;

ElementValueArrayInitializer implements ElementValue
    =   "{" (ElementValueOrExpr || ",")* (",")? "}";

EnhancedForControl implements ForControl
    = FormalParameter ":" Expression;

ArrayDimensionByInitializer implements ArrayDimensionSpecifier
    = (dim:"[" "]")+ ArrayInit;

}

