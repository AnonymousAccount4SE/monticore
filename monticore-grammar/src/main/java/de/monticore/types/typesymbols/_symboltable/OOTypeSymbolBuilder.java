// (c) https://github.com/MontiCore/monticore

package de.monticore.types.typesymbols._symboltable;


import de.monticore.types.basictypesymbols._symboltable.TypeVarSymbol;

import java.util.*;


public  class OOTypeSymbolBuilder extends OOTypeSymbolBuilderTOP {


public OOTypeSymbolBuilder()  {
   this.realBuilder = (OOTypeSymbolBuilder) this;
}


  @Override
  public OOTypeSymbolBuilder setSpannedScope(ITypeSymbolsScope spannedScope) {
    this.spannedScope = spannedScope;
    return super.setSpannedScope(spannedScope);
  }

  public OOTypeSymbolBuilder setTypeParameterList(List<TypeVarSymbol> typeVariableList) {
    for(TypeVarSymbol t : typeVariableList) {
      spannedScope.add(t);
    }
    return this.realBuilder;
  }

   public OOTypeSymbolBuilder setMethodList(List<MethodSymbol> methodList) {
      for(MethodSymbol m : methodList) {
        spannedScope.add(m);
      }
      return this.realBuilder;
   }

   public OOTypeSymbolBuilder setFieldList(List<FieldSymbol> fieldList) {
      for(FieldSymbol f : fieldList) {
        spannedScope.add(f);
      }
      return this.realBuilder;
   }
@Override
  public OOTypeSymbol build ()  {
    /* generated by template _symboltable.symbol.Build*/

    OOTypeSymbol symbol = new OOTypeSymbol(name);
    symbol.setName(this.name);
    symbol.setEnclosingScope(this.enclosingScope);
    if (isPresentAstNode()) {
      symbol.setAstNode(this.astNode.get());
    } else {
      symbol.setAstNodeAbsent();
    }
    symbol.setAccessModifier(this.accessModifier);
    symbol.setFullName(this.fullName);
    symbol.setPackageName(this.packageName);
    symbol.setSuperTypeList(this.superTypes);
    symbol.setSpannedScope(this.spannedScope);

    return symbol;

  }

}
