/* generated by template symboltable.serialization.SymbolSerialization*/

package de.monticore.types.serialization;

import java.lang.reflect.Type;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonSerializationContext;
import com.google.gson.reflect.TypeToken;

import de.monticore.symboltable.serializing.ISerialization;
import de.monticore.symboltable.serializing.SerializationBuilder;
import de.monticore.symboltable.serializing.SymbolTableSerializationHelper;
import de.monticore.types.mcbasictypes._ast.ASTMCQualifiedType;
import de.monticore.types.mcbasictypes._ast.ASTMCQualifiedTypeBuilder;
import de.monticore.types.mcbasictypes._ast.MCBasicTypesMill;

class ASTMCQualifiedTypeSerializer
    implements ISerialization<ASTMCQualifiedType> {
  
  @Override
  public ASTMCQualifiedType deserialize(JsonElement json, Type typeOfT,
      JsonDeserializationContext context) throws JsonParseException {
    JsonObject jsonObject = json.getAsJsonObject();
    if (ASTMCQualifiedType.class.getName()
        .equals(SymbolTableSerializationHelper.getClassName(jsonObject))) {
      
      Type listType = new TypeToken<List<String>>() {}.getType();
      List<String> parts = new Gson().fromJson(jsonObject.get("mCQualifiedName"), listType);
      
      ASTMCQualifiedTypeBuilder builder = MCBasicTypesMill.mCQualifiedTypeBuilder();
      builder
          .setMCQualifiedName(MCBasicTypesMill.mCQualifiedNameBuilder().setPartList(parts).build());
      
      return builder.build();
    }
    throw new JsonParseException("Deserialization of 'AutomatonSymbol' failed!");
  }
  
  @Override
  public JsonElement serialize(ASTMCQualifiedType src, Type typeOfSrc,
      JsonSerializationContext context) {
    
    JsonObject json = new JsonObject();
    json = new SerializationBuilder(json, context)
        .add(CLASS, ASTMCQualifiedType.class.getName())
        .add("mCQualifiedName", src.getNameList())
        .build();
    return json;
  }
  
  @Override
  public Class<ASTMCQualifiedType> getSerializedClass() {
    return ASTMCQualifiedType.class;
  }
}
